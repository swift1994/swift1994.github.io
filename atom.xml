<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>老于丢的水稻田</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xiangyu520.top/"/>
  <updated>2017-09-26T13:27:27.916Z</updated>
  <id>http://www.xiangyu520.top/</id>
  
  <author>
    <name>Neo</name>
    <email>robertneon94@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Git工作流程</title>
    <link href="http://www.xiangyu520.top/GIt/2017/09/26/Git%E5%85%A5%E9%97%A8.html"/>
    <id>http://www.xiangyu520.top/GIt/2017/09/26/Git入门.html</id>
    <published>2017-09-26T13:21:48.892Z</published>
    <updated>2017-09-26T13:27:27.916Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="/uploads/countryside-2326787__480.jpg" alt="image"><br><a id="more"></a></p>
<h1><span id="git工作流程">Git工作流程</span></h1><p><img src="/uploads/clipboard4.png" alt="image"></p>
<ul>
<li>Workspace：工作区</li>
<li>Index / Stage：暂存区</li>
<li>Repository：仓库区（或本地仓库）</li>
<li>Remote：远程仓库</li>
</ul>
<h3><span id="工作区">工作区</span></h3><p>程序员进行开发改动的地方，是你当前看到的，也是最新的。<br>平常我们开发就是拷贝远程仓库中的一个分支，基于该分支进行开发。在开发过程中就是对工作区的操作。</p>
<h3><span id="暂存区">暂存区</span></h3><p>.git目录下的index文件, 暂存区会记录git add添加文件的相关信息(文件名、大小、timestamp…)，不保存文件实体, 通过id指向每个文件实体。可以使用git status查看暂存区的状态。暂存区标记了你当前工作区中，哪些内容是被git管理的。</p>
<p>当你完成某个需求或功能后需要提交到远程仓库，那么第一步就是通过git add先提交到暂存区，被git管理。</p>
<h3><span id="本地仓库">本地仓库</span></h3><p>保存了对象被提交 过的各个版本，比起工作区和暂存区的内容，它要更旧一些。</p>
<p>git commit后同步index的目录树到本地仓库，方便从下一步通过git push同步本地仓库与远程仓库的同步。</p>
<h3><span id="远程仓库">远程仓库</span></h3><p>远程仓库的内容可能被分布在多个地点的处于协作关系的本地仓库修改，因此它可能与本地仓库同步，也可能不同步，但是它的内容是最旧的。</p>
<h3><span id="小结">小结</span></h3><ul>
<li>任何对象都是在工作区中诞生和被修改；</li>
<li>任何修改都是从进入index区才开始被版本控制；</li>
<li>只有把修改提交到本地仓库，该修改才能在仓库中留下痕迹；</li>
<li>与协作者分享本地的修改，可以把它们push到远程仓库来共享。</li>
</ul>
<p><img src="/uploads/clipboard6.png" alt="image"></p>
<h2><span id="常用git命令">常用Git命令</span></h2><p><img src="/uploads/clipboard7.png" alt="image"></p>
<p><img src="/uploads/clipboard8.png" alt="image"></p>
<p>HEAD，它始终指向当前所处分支的最新的提交点。你所处的分支变化了，或者产生了新的提交点，HEAD就会跟着改变。</p>
<h3><span id="add">add</span></h3><p><img src="/uploads/f1d0e6733039.png" alt="image"></p>
<p>add相关命令很简单，主要实现将工作区修改的内容提交到暂存区，交由git管理。</p>
<ul>
<li>git add .        添加当前目录的所有文件到暂存区</li>
<li>git add [dir]         添加指定目录到暂存区，包括子目录</li>
<li>git add [file1]      添加指定文件到暂存区</li>
</ul>
<h3><span id="commit">commit</span></h3><p><img src="/uploads/f1d0e6733039.png" alt="image"></p>
<p>commit相关命令也很简单，主要实现将暂存区的内容提交到本地仓库，并使得当前分支的HEAD向后移动一个提交点。</p>
<ul>
<li><p>git commit -m [message]<br>提交暂存区到本地仓库,message代表说明信息</p>
</li>
<li><p>git commit [file1] -m [message]       </p>
<p>提交暂存区的指定文件到本地仓库</p>
</li>
<li><p>git commit –amend -m [message]    </p>
<p>使用一次新的commit，替代上一次提交</p>
</li>
</ul>
<h3><span id="branch">branch</span></h3><p><img src="/uploads/af6562fc85f16.png" alt="image"></p>
<p>涉及到协作，自然会涉及到分支，关于分支，大概有展示分支，切换分支，创建分支，删除分支这四种操作。</p>
<ul>
<li>git branch 列出所有本地分支</li>
<li>git branch -r 列出所有远程分支</li>
<li>git branch -a 列出所有本地分支和远程分支</li>
<li>git branch [branch-name] 新建一个分支，但依然停留在当前分支</li>
<li>git checkout -b [branch-name] 新建一个分支，并切换到该分支</li>
<li>git branch –track [branch][remote-branch] 新建一个分支，与指定的远程分支建立追踪关系</li>
<li>git checkout [branch-name] 切换到指定分支，并更新工作区</li>
<li>git branch -d [branch-name] 删除分支</li>
<li>git push origin –delete [branch-name] 删除远程分支</li>
</ul>
<h3><span id="merge">merge</span></h3><p><img src="/uploads/1f297262f85b7.png" alt="image"></p>
<p>merge命令把不同的分支合并起来。如上图，在实际开放中，我们可能从master分支中切出一个分支，然后进行开发完成需求，中间经过R3,R4,R5的commit记录，最后开发完成需要合入master中，这便用到了merge。</p>
<ul>
<li>git fetch [remote] merge之前先拉一下远程仓库最新代码</li>
<li>git merge [branch] 合并指定分支到当前分支</li>
</ul>
<p>一般在merge之后，会出现conflict，需要针对冲突情况，手动解除冲突。主要是因为两个用户修改了同一文件的同一块区域。如下图所示，需要手动解除。<br><img src="/uploads/1eb8cd6d898e8.png" alt="image"></p>
<h3><span id="rebase">rebase</span></h3><p><img src="/uploads/cc32dd8ff7837.png" alt="image"></p>
<p>rebase又称为衍合，是合并的另外一种选择。<br>在开始阶段，我们处于new分支上，执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase dev</div></pre></td></tr></table></figure></p>
<p>那么new分支上新的commit都在master分支上重演一遍，最后checkout切换回到new分支。这一点与merge是一样的，合并前后所处的分支并没有改变。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase dev</div></pre></td></tr></table></figure></p>
<p>通俗的解释就是new分支想站在dev的肩膀上继续下去。rebase也需要手动解决冲突。</p>
<h3><span id="reset">reset</span></h3><p><img src="/uploads/f8769aeb49918.png" alt="image"></p>
<p>reset命令把当前分支指向另一个位置，并且相应的变动工作区和暂存区。</p>
<ul>
<li><p>git reset —soft [commit]</p>
<p>只改变提交点，暂存区和工作目录的内容都不改变</p>
</li>
<li><p>git reset —mixed [commit] </p>
<p>改变提交点，同时改变暂存区的内容</p>
</li>
<li>git reset —hard [commit] </li>
<li>暂存区、工作区的内容都会被修改到与提交点完全一致的状态</li>
<li><p>git reset –hard HEAD</p>
<p>让工作区回到上次提交时的状态</p>
</li>
</ul>
<h3><span id="revert">revert</span></h3><p><img src="/uploads/dbb35de9e4b8.jpeg" alt="image"></p>
<p>git revert用一个新提交来消除一个历史提交所做的任何修改。<br>revert与reset的区别</p>
<p><img src="/uploads/1a88762c6189.jpeg" alt="image"></p>
<ul>
<li><p>git revert是用一次新的commit来回滚之前的commit，git reset是直接删除指定的commit。</p>
</li>
<li><p>在回滚这一操作上看，效果差不多。但是在日后继续merge以前的老版本时有区别。因为git revert是用一次逆向的commit“中和”之前的提交，因此日后合并老的branch时，导致这部分改变不会再次出现，减少冲突。但是git reset是之间把某些commit在某个branch上删除，因而和老的branch再次merge时，这些被回滚的commit应该还会被引入，产生很多冲突。</p>
</li>
<li><p>git reset 是把HEAD向后移动了一下，而git revert是HEAD继续前进，只是新的commit的内容和要revert的内容正好相反，能够抵消要被revert的内容。</p>
<h3><span id="push">push</span></h3><p>上传本地仓库分支到远程仓库分支，实现同步。</p>
</li>
<li><p>git push [remote][branch]</p>
<p>上传本地指定分支到远程仓库</p>
</li>
<li><p>git push [remote] –force</p>
<p>强行推送当前分支到远程仓库，即使有冲突</p>
</li>
<li><p>git push [remote] –all</p>
<p>推送所有分支到远程仓库</p>
</li>
<li><p>git status </p>
<p>显示有变更的文件</p>
</li>
<li><p>git log </p>
<p>显示当前分支的版本历史</p>
</li>
<li><p>git diff</p>
<p>显示暂存区和工作区的差异</p>
</li>
<li><p>git diff HEAD</p>
<p>显示工作区与当前分支最新commit之间的差异</p>
</li>
<li><p>git cherry-pick [commit]</p>
<p>选择一个commit，合并进当前分支</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/countryside-2326787__480.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="GIt" scheme="http://www.xiangyu520.top/categories/GIt/"/>
    
    
      <category term="Git" scheme="http://www.xiangyu520.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Java线程池</title>
    <link href="http://www.xiangyu520.top/Java/2017/09/19/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E7%BA%BF%E7%A8%8B%E6%B1%A0.html"/>
    <id>http://www.xiangyu520.top/Java/2017/09/19/深入理解Java线程池.html</id>
    <published>2017-09-19T13:14:05.400Z</published>
    <updated>2017-09-19T13:34:13.213Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="/uploads/mountains-1828596__480.jpg" alt="image"><br><a id="more"></a></p>
<h3><span id="线程池的作用">线程池的作用</span></h3><ol>
<li><p>降低资源消耗。通过重复利用已创建的线程降低线程创建和销毁造成的消耗。</p>
</li>
<li><p>提高响应速度。当任务到达时，任务可以不需要的等到线程创建就能立即执行。</p>
</li>
<li><p>提高线程的可管理性。线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配，调优和监控。</p>
</li>
</ol>
<p>常用线程池：ExecutorService是主要的实现类，其中常用的有Executors.newSingleThreadPool(), newFixedThreadPool(), newcachedTheadPool(), newScheduledThreadPool()。</p>
<h3><span id="线程池原理">线程池原理</span></h3><p>预先启动一些线程，线程无限循环从任务队列中获取一个任务进行执行，直到线程池被关闭。如果某个线程因为执行某个任务发生异常而终止，那么重新创建一个新的线程而已。如此反复。</p>
<p><img src="/uploads/clipboard.png" alt="image"></p>
<p>  ● step1、调用ThreadPoolExecutor的执行提交线程，首先检查CorePool，如果CorePool内的线程小于CorePoolSize，新创建线程执行任务</p>
<p>  ● step2、如果当前CorePool内的线程大于等于CorePoolSize，那么将线程加入到BlockingQueue。</p>
<p>  ● step3、如果不能加入BlockingQueue，在小于MaxPoolSize的情况下创建线程执行任务</p>
<p>  ● step4。如果线程数大于等于MaxPoolSize，那么执行拒绝策略。</p>
<h3><span id="线程池的创建">线程池的创建</span></h3><p><img src="/uploads/clipboard2.png" alt="image"></p>
<p>worker：工作类，一个worker代表启动了一个线程，它启动后会循环执行workQueue里面的所有任务</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue&lt;Runnable&gt; workQueue, ThreadFactory threadFactory, RejectedExecutionHandler handler)</div></pre></td></tr></table></figure>
<h5><span id="corepoolsize线程池的基本大小">● corePoolSize（线程池的基本大小）</span></h5><p>当提交一个任务到线程池时，线程池会创建一个线程来执行任务，即使其他空闲的基本线程能够执行新任务也会创建线程，等到需要执行的任务数大于线程池基本大小时就不再创建。如果调用了线程池的prestartAllCoreThreads方法，线程池会提前创建并启动所有基本线程。</p>
<h5><span id="runnabletaskqueue任务队列">● runnableTaskQueue（任务队列）</span></h5><p>用于保存等待执行的任务的阻塞队列。可以选择以下几个阻塞队列。</p>
<blockquote>
<ol>
<li>ArrayBlockingQueue：是一个基于数组结构的有界阻塞队列，此队列按 FIFO（先进先出）原则对元素进行排序。</li>
<li>LinkedBlockingQueue：一个基于链表结构的阻塞队列，此队列按FIFO （先进先出） 排序元素，吞吐量通常要高于ArrayBlockingQueue。静态工厂方法Executors.newFixedThreadPool()使用了这个队列。</li>
<li>SynchronousQueue：一个不存储元素的阻塞队列。每个插入操作必须等到另一个线程调用移除操作，否则插入操作一直处于阻塞状态，吞吐量通常要高于LinkedBlockingQueue，静态工厂方法Executors.newCachedThreadPool使用了这个队列。</li>
<li>PriorityBlockingQueue：一个具有优先级得无限阻塞队列。</li>
</ol>
</blockquote>
<h5><span id="maximumpoolsize线程池最大大小">● maximumPoolSize（线程池最大大小）</span></h5><p>线程池允许创建的最大线程数。如果队列满了，并且已创建的线程数小于最大线程数，则线程池会再创建新的线程执行任务。值得注意的是如果使用了无界的任务队列这个参数就没什么效果。</p>
<h5><span id="threadfactory">● ThreadFactory</span></h5><p>用于设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程设置 更有意义的名字，Debug和定位问题时非常又帮助。</p>
<h5><span id="keepalivetime线程活动保持时间">● keepAliveTime（线程活动保持时间）</span></h5><p>  线程池的工作线程空闲后，保持存活的时间。所以如果任务很多，并且每个任务执行的时间比较短，可以调大这个时间，提高线程的利用率。</p>
<h5><span id="timeunit线程活动保持时间的单位">● TimeUnit（线程活动保持时间的单位）</span></h5><p>可选的单位有天（DAYS），小时（HOURS），分钟（MINUTES），毫秒(MILLISECONDS)，微秒(MICROSECONDS, 千分之一毫秒)和毫微秒(NANOSECONDS, 千分之一微秒)。</p>
<h5><span id="rejectedexecutionhandler饱和策略">RejectedExecutionHandler（饱和策略）</span></h5><p>当队列和线程池都满了，说明线程池处于饱和状态，那么必须采取一种策略处理提交的新任务。这个策略默认情况下是AbortPolicy，表示无法处理新任务时抛出异常。以下是JDK1.5提供的四种策略：</p>
<blockquote>
<ol>
<li>CallerRunsPolicy：只用调用者所在线程来运行任务。</li>
<li>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务。</li>
<li>DiscardPolicy：不处理，丢弃掉。</li>
<li>也可以根据应用场景需要来实现RejectedExecutionHandler接口自定义策略。如记录日志或持久化不能处理的任务。</li>
</ol>
</blockquote>
<h3><span id="线程池任务submit及执行流程">线程池任务submit及执行流程</span></h3><p>流程分析：线程池的主要工作流程如下图：</p>
<p><img src="/uploads/81a.jpeg" alt="image"></p>
<p>从上图我们可以看出，当提交一个新任务到线程池时，线程池的处理流程如下：</p>
<blockquote>
<p> a.一个任务提交，如果线程池大小没达到corePoolSize，则每次都启动一个worker也就是一个线程来立即执行</p>
<p>b.如果来不及执行，则把多余的线程放到workQueue，等待已启动的worker来循环执行</p>
<p>c.如果队列workQueue都放满了还没有执行，则在maximumPoolSize下面启动新的worker来循环执行workQueue</p>
<p>d.如果启动到maximumPoolSize还有任务进来，线程池已达到满负载，此时就执行任务拒绝RejectedExecutionHandler</p>
</blockquote>
<p>Java Code 线程池核心的代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">1. // 流程就是：没达到corePoolSize，创建worker执行，达到corePoolSize加入workQueue</div><div class="line">//           workQueue满了且在maximumPoolSize下，创建新worker，达到maximumPoolSize，执行reject</div><div class="line">public void execute(Runnable command) &#123;</div><div class="line">    if (command == null)</div><div class="line">        throw new NullPointerException();</div><div class="line"></div><div class="line">    // 1：poolSize达到corePoolSize，执行3把任务加入workQueue</div><div class="line">    // 2：poolSize没达到，执行addIfUnderCorePoolSize()在corePoolSize内创建新worker立即执行任务</div><div class="line">    //    如果达到corePoolSize，则同上执行3</div><div class="line">    if (poolSize &gt;= corePoolSize || !addIfUnderCorePoolSize(command)) &#123;</div><div class="line">        // 3:workQueue满了，执行5</div><div class="line">        if (runState == RUNNING &amp;&amp; workQueue.offer(command)) &#123;</div><div class="line">            if (runState != RUNNING || poolSize == 0) &#123;</div><div class="line">                // 4:如果线程池关闭，执行拒绝策略</div><div class="line">                //   如果poolSize==0，新启动一个线程执行队列内任务</div><div class="line">                ensureQueuedTaskHandled(command);</div><div class="line">            &#125;</div><div class="line">            // 5:在maximumPoolSize内创建新worker立即执行任务</div><div class="line">            //   如果达到maximumPoolSize，执行6拒绝策略</div><div class="line">        &#125; else if (!addIfUnderMaximumPoolSize(command))</div><div class="line">            // 6:拒绝策略</div><div class="line">            reject(command); // is shutdown or saturated</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>从上面代码可以看出，一个任务提交什么时候立即执行呢？</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">runState == RUNNING &amp;&amp; ( poolSize &lt; corePoolSize || (workQueue.isFull() &amp;&amp; poolSize &lt; maxnumPoolSize))</div></pre></td></tr></table></figure>
<h5><span id="向线程池提交任务">向线程池提交任务</span></h5><p>1、我们可以使用execute提交的任务，但是execute方法没有返回值，所以无法判断任务知否被线程池执行成功。通过以下代码可知execute方法输入的任务是一个Runnable类的实例。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">threadsPool.execute(new Runnable() &#123;</div><div class="line">@Override</div><div class="line">public void run() &#123;</div><div class="line">// TODO Auto-generated method stub</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>2、我们也可以使用submit 方法来提交任务，它会返回一个future,那么我们可以通过这个future来判断任务是否执行成功，通过future的get方法来获取返回值，get方法会阻塞住直到任务完成，而使用get(long timeout, TimeUnit unit)方法则会阻塞一段时间后立即返回，这时有可能任务没有执行完。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">Object s = future.get();</div><div class="line">&#125; catch (InterruptedException e) &#123;</div><div class="line">// 处理中断异常</div><div class="line">&#125; catch (ExecutionException e) &#123;</div><div class="line">// 处理无法执行任务异常</div><div class="line">&#125; finally &#123;</div><div class="line">// 关闭线程池</div><div class="line">executor.shutdown();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><span id="工作worker的原理">工作Worker的原理</span></h3><p>上面讲过线程池创建线程其实是委托给Worker这个对象完成的。worker会循环获取工作队列的任务来完成。线程池创建线程时，会将线程封装成工作线程Worker，Worker在执行完任务后，还会无限循环获取工作队列里的任务来执行。我们可以从Worker的run方法里看到这点：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public void run() &#123;</div><div class="line">    try &#123;</div><div class="line">        Runnable task = firstTask;</div><div class="line">        firstTask = null;</div><div class="line">        // getTask()是从workQueue里面阻塞获取任务，如果getTask()返回null则终结本线程</div><div class="line">        while (task != null || (task = getTask()) != null) &#123;</div><div class="line">            runTask(task);</div><div class="line">            task = null;</div><div class="line">        &#125;</div><div class="line">    &#125; finally &#123;</div><div class="line">        // 走到这里代表这个worker或者说这个线程由于线程池关闭或超过aliveTime需要关闭了</div><div class="line">        workerDone(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><span id="线程的销毁">线程的销毁</span></h3><p>keepAliveTime：代表的就是线程空闲后多久后销毁，线程的销毁是通过worker的getTask()来实现的。</p>
<p>一般来说，Worker会循环获取getTask()，如果getTask()返回null则工作线程worker终结，那我们再看看什么时候getTask()返回null</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">Runnable getTask() &#123;</div><div class="line">    for (;;) &#123;</div><div class="line">        try &#123;</div><div class="line">            int state = runState;</div><div class="line">            if (state &gt; SHUTDOWN)</div><div class="line">                return null;</div><div class="line">            Runnable r;</div><div class="line">            if (state == SHUTDOWN)  // Help drain queue</div><div class="line">                r = workQueue.poll();</div><div class="line">            else if (poolSize &gt; corePoolSize || allowCoreThreadTimeOut)</div><div class="line">                // 在poolSize大于corePoolSize或允许核心线程超时时</div><div class="line">                // 阻塞超时获取有可能获取到null，此时worker线程销毁</div><div class="line">                r = workQueue.poll(keepAliveTime, TimeUnit.NANOSECONDS);</div><div class="line">            else</div><div class="line">                r = workQueue.take();</div><div class="line">            if (r != null)</div><div class="line">                return r;</div><div class="line">            // 这里是是否运行worker线程销毁的判断</div><div class="line">            if (workerCanExit()) &#123;</div><div class="line">                if (runState &gt;= SHUTDOWN)</div><div class="line">                    // STOP或TERMINATED状态，终止空闲worker</div><div class="line">                    interruptIdleWorkers();</div><div class="line">                return null; // 这里返回null，代表工作线程worker销毁</div><div class="line">            &#125;</div><div class="line">            // 其他：retry，继续循环</div><div class="line">        &#125; catch (InterruptedException ie) &#123;</div><div class="line">            // On interruption, re-check runState</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3><span id="线程池关闭">线程池关闭</span></h3><h5><span id="平缓关闭-shutdown">平缓关闭 shutdown</span></h5><p>已经启动的任务全部执行完毕，同时不再接受新的任务</p>
<h5><span id="立即关闭-shutdownnow">立即关闭 shutdownNow</span></h5><p>取消所有正在执行和未执行的任务<br>shutdown的原理是只是将线程池的状态设置成SHUTDOWN状态，然后中断所有没有正在执行任务的线程。</p>
<p>shutdownNow的原理是遍历线程池中的工作线程，然后逐个调用线程的interrupt方法来中断线程，所以无法响应中断的任务可能永远无法终止。shutdownNow会首先将线程池的状态设置成STOP，然后尝试停止所有的正在执行或暂停任务的线程，并返回等待执行任务的列表。</p>
<p>只要调用了这两个关闭方法的其中一个，isShutdown方法就会返回true。当所有的任务都已关闭后,才表示线程池关闭成功，这时调用isTerminaed方法会返回true。至于我们应该调用哪一种方法来关闭线程池，应该由提交到线程池的任务特性决定，通常调用shutdown来关闭线程池，如果任务不一定要执行完，则可以调用shutdownNow。</p>
<h3><span id="线程池的监控">线程池的监控</span></h3><p>通过线程池提供的参数进行监控。线程池里有一些属性在监控线程池的时候可以使用。</p>
<p>taskCount：线程池需要执行的任务数量。</p>
<p>completedTaskCount：线程池在运行过程中已完成的任务数量。小于或等于taskCount。</p>
<p>largestPoolSize：线程池曾经创建过的最大线程数量。通过这个数据可以知道线程池是否满过。如等于线程池的最大大小，则表示线程池曾经满了。</p>
<p>getPoolSize:线程池的线程数量。如果线程池不销毁的话，池里的线程不会自动销毁，所以这个大小只增不+getActiveCount：获取活动的线程数。</p>
<p>通过扩展线程池进行监控。通过继承线程池并重写线程池的beforeExecute，afterExecute和terminated方法，我们可以在任务执行前，执行后和线程池关闭前干一些事情。如监控任务的平均执行时间，最大执行时间和最小执行时间等。这几个方法在线程池里是空方法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/mountains-1828596__480.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.xiangyu520.top/categories/Java/"/>
    
    
      <category term="线程池" scheme="http://www.xiangyu520.top/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
  </entry>
  
  <entry>
    <title>将一个文件的内容复制到另一个文件</title>
    <link href="http://www.xiangyu520.top/%E7%AC%94%E8%AF%95%E9%A2%98/2017/09/14/%E5%B0%86%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6%E5%88%B0%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%96%87%E4%BB%B6%E4%B8%AD.html"/>
    <id>http://www.xiangyu520.top/笔试题/2017/09/14/将一个文件复制到另一个文件中.html</id>
    <published>2017-09-14T10:03:35.773Z</published>
    <updated>2017-09-14T11:21:56.405Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="/uploads/blue.jpg" alt="image"><br><a id="more"></a></p>
<h2><span id="1-使用filestreams复制">1. 使用FileStreams复制</span></h2><p>这是最经典的方式将一个文件的内容复制到另一个文件中。 使用FileInputStream读取文件A的字节，使用FileOutputStream写入到文件B。 这是第一个方法的代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private static void copyFileUsingFileStreams(File source, File dest)</div><div class="line">        throws IOException &#123;    </div><div class="line">    InputStream input = null;    </div><div class="line">    OutputStream output = null;    </div><div class="line">    try &#123;</div><div class="line">           input = new FileInputStream(source);</div><div class="line">           output = new FileOutputStream(dest);        </div><div class="line">           byte[] buf = new byte[1024];        </div><div class="line">           int bytesRead;        </div><div class="line">           while ((bytesRead = input.read(buf)) &gt; 0) &#123;</div><div class="line">               output.write(buf, 0, bytesRead);</div><div class="line">           &#125;</div><div class="line">    &#125; finally &#123;</div><div class="line">        input.close();</div><div class="line">        output.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正如你所看到的我们执行几个读和写操作try的数据,所以这应该是一个低效率的,下一个方法我们将看到新的方式。</p>
<h2><span id="2-使用filechannel复制">2. 使用FileChannel复制</span></h2><p>Java NIO包括transferFrom方法,根据文档应该比文件流复制的速度更快。 这是第二种方法的代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">private static void copyFileUsingFileChannels(File source, File dest) throws IOException &#123;    </div><div class="line">        FileChannel inputChannel = null;    </div><div class="line">        FileChannel outputChannel = null;    </div><div class="line">    try &#123;</div><div class="line">        inputChannel = new FileInputStream(source).getChannel();</div><div class="line">        outputChannel = new FileOutputStream(dest).getChannel();</div><div class="line">        outputChannel.transferFrom(inputChannel, 0, inputChannel.size());</div><div class="line">    &#125; finally &#123;</div><div class="line">        inputChannel.close();</div><div class="line">        outputChannel.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2><span id="3-使用commons-io复制">3. 使用Commons IO复制</span></h2><p>Apache Commons IO提供拷贝文件方法在其FileUtils类,可用于复制一个文件到另一个地方。它非常方便使用Apache Commons FileUtils类时,您已经使用您的项目。基本上,这个类使用Java NIO FileChannel内部。 这是第三种方法的代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private static void copyFileUsingApacheCommonsIO(File source, File dest)</div><div class="line">        throws IOException &#123;</div><div class="line">    FileUtils.copyFile(source, dest);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2><span id="4-使用java7的files类复制">4. 使用Java7的Files类复制</span></h2><p>如果你有一些经验在Java 7中你可能会知道,可以使用复制方法的Files类文件,从一个文件复制到另一个文件。 这是第四个方法的代码:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">private static void copyFileUsingJava7Files(File source, File dest)</div><div class="line">        throws IOException &#123;    </div><div class="line">        Files.copy(source.toPath(), dest.toPath());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/blue.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="笔试题" scheme="http://www.xiangyu520.top/categories/%E7%AC%94%E8%AF%95%E9%A2%98/"/>
    
    
      <category term="编程题" scheme="http://www.xiangyu520.top/tags/%E7%BC%96%E7%A8%8B%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>创建并运行java线程</title>
    <link href="http://www.xiangyu520.top/Java/2017/09/13/%E5%88%9B%E5%BB%BA%E5%B9%B6%E8%BF%90%E8%A1%8Cjava%E7%BA%BF%E7%A8%8B.html"/>
    <id>http://www.xiangyu520.top/Java/2017/09/13/创建并运行java线程.html</id>
    <published>2017-09-13T13:29:05.574Z</published>
    <updated>2017-09-14T11:26:41.799Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="/uploads/homberg-1959229_1920.jpg" alt="image"><br><a id="more"></a></p>
<h2><span id="编写线程运行时执行的代码有两种方式">编写线程运行时执行的代码有两种方式</span></h2><h3><span id="第一种是创建thread子类的一个实例并重写run方法">第一种是创建Thread子类的一个实例并重写run方法</span></h3><h3><span id="第二种是创建类的时候实现runnable接口">第二种是创建类的时候实现Runnable接口</span></h3><h3><span id="创建thread的子类">创建Thread的子类</span></h3><p>创建Thread子类的一个实例并重写run方法，run方法会在调用start()方法之后被执行。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class MyThread extends Thread &#123;</div><div class="line">   public void run()&#123;</div><div class="line">     System.out.println(&quot;MyThread running&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以用如下方式创建并运行上述Thread子类</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MyThread myThread = new MyThread();</div><div class="line">myTread.start();</div></pre></td></tr></table></figure>
<p>一旦线程启动后start方法就会立即返回，而不会等待到run方法执行完毕才返回。就好像run方法是在另外一个cpu上执行一样。当run方法执行后，将会打印出字符串MyThread running。</p>
<p>你也可以如下创建一个Thread的匿名子类：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Thread thread = new Thread()&#123;</div><div class="line">   public void run()&#123;</div><div class="line">     System.out.println(&quot;Thread Running&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;;</div><div class="line">thread.start();</div></pre></td></tr></table></figure>
<p>当新的线程的run方法执行以后，计算机将会打印出字符串”Thread Running”。</p>
<h3><span id="实现runnable接口">实现Runnable接口</span></h3><p>第二种编写线程执行代码的方式是新建一个实现了java.lang.Runnable接口的类的实例，实例中的方法可以被线程调用。<br>下面给出例子：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class MyRunnable implements Runnable &#123;</div><div class="line">   public void run()&#123;</div><div class="line">    System.out.println(&quot;MyRunnable running&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了使线程能够执行run()方法，需要在Thread类的构造函数中传入 MyRunnable的实例对象。示例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Thread thread = new Thread(new MyRunnable());</div><div class="line">thread.start();</div></pre></td></tr></table></figure>
<p>   当线程运行时，它将会调用实现了Runnable接口的run方法。上例中将会打印出”MyRunnable running”。</p>
<p>同样，也可以创建一个实现了Runnable接口的匿名类，如下所示：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Runnable myRunnable = new Runnable()&#123;</div><div class="line">   public void run()&#123;</div><div class="line">     System.out.println(&quot;Runnable running&quot;);</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">Thread thread = new Thread(myRunnable);</div><div class="line">thread.start();</div></pre></td></tr></table></figure>
<h3><span id="创建子类还是实现runnable接口">创建子类还是实现Runnable接口？</span></h3><p>对于这两种方式哪种好并没有一个确定的答案，它们都能满足要求。就我个人意见，我更倾向于实现Runnable接口这种方法。</p>
<p>因为线程池可以有效的管理实现了Runnable接口的线程，如果线程池满了，新的线程就会排队等候执行，直到线程池空闲出来为止。而如果线程是通过实现Thread子类实现的，这将会复杂一些。</p>
<p>有时我们要同时融合实现Runnable接口和Thread子类两种方式。例如，实现了Thread子类的实例可以执行多个实现了Runnable接口的线程。一个典型的应用就是线程池。</p>
<h3><span id="常见错误调用run方法而非start方法">常见错误：调用run()方法而非start()方法</span></h3><p>创建并运行一个线程所犯的常见错误是调用线程的run()方法而非start()方法，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Thread newThread = new Thread(MyRunnable());</div><div class="line">newThread.run();  //should be start();</div></pre></td></tr></table></figure>
<p>起初你并不会感觉到有什么不妥，因为run()方法的确如你所愿的被调用了。但是，事实上,run()方法并非是由刚创建的新线程所执行的，而是被创建新线程的当前线程所执行了。也就是被执行上面两行代码的线程所执行的。想要让创建的新线程执行run()方法，必须调用新线程的start方法。</p>
<h3><span id="线程名">线程名</span></h3><p>当创建一个线程的时候，可以给线程起一个名字。它有助于我们区分不同的线程。例如：如果有多个线程写入System.out，我们就能够通过线程名容易的找出是哪个线程正在输出。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">MyRunnable runnable = new MyRunnable();</div><div class="line">Thread thread = new Thread(runnable, &quot;New Thread&quot;);</div><div class="line">thread.start();</div><div class="line">System.out.println(thread.getName());</div></pre></td></tr></table></figure>
<p>需要注意的是，因为MyRunnable并非Thread的子类，所以MyRunnable类并没有getName()方法。可以通过以下方式得到当前线程的引用:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Thread.currentThread();</div></pre></td></tr></table></figure>
<p>因此，通过如下代码可以得到当前线程的名字：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String threadName = Thread.currentThread().getName();</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/homberg-1959229_1920.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.xiangyu520.top/categories/Java/"/>
    
    
      <category term="多线程" scheme="http://www.xiangyu520.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Java内存管理</title>
    <link href="http://www.xiangyu520.top/Java/2017/09/12/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Java%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html"/>
    <id>http://www.xiangyu520.top/Java/2017/09/12/深入理解Java内存管理.html</id>
    <published>2017-09-12T12:28:00.099Z</published>
    <updated>2017-09-14T11:27:37.360Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="/uploads/surfer-2212948__480.jpg" alt="image"><br><a id="more"></a></p>
<h2><span id="运行时数据区域"><strong>运行时数据区域</strong></span></h2><p><img src="/uploads/jvm_memory_1.png" alt="image"></p>
<p><img src="/uploads/stack_heap_info.png" alt="image"></p>
<h2><span id="1-程序计数器pc">1 程序计数器PC</span></h2><p>程序计数器PC，当前线程所执行的字节码行号指示器。每个线程都有自己计数器，是私有内存空间，该区域是整个内存中较小的一块。<br>当线程正在执行一个Java方法时，PC计数器记录的是正在执行的虚拟机字节码的地址；当线程正在执行的一个Native方法时，PC计数器则为空（Undefined）。</p>
<h2><span id="2-虚拟机栈">2 虚拟机栈</span></h2><p>虚拟机栈，生命周期与线程相同，是Java方法执行的内存模型。每个方法(不包含native方法)执行的同时都会创建一个栈帧结构，方法执行过程，对应着虚拟机栈的入栈到出栈的过程。<br>栈帧(Stack Frame)结构<br>栈帧是用于支持虚拟机进行方法执行的数据结构，是属性运行时数据区的虚拟机站的栈元素。见上图， 栈帧包括：</p>
<ul>
<li>局部变量表 (locals大小，编译期确定)，一组变量存储空间， 容量以slot为最小单位。</li>
<li>操作栈(stack大小，编译期确定)，操作栈元素的数据类型必须与字节码指令序列严格匹配</li>
<li>动态连接， 指向运行时常量池中该栈帧所属方法的引用，为了 动态连接使用。</li>
<li>○ 前面的解析过程其实是静态解析；</li>
<li>○ 对于运行期转化为直接引用，称为动态解析。</li>
<li>方法返回地址</li>
<li>○ 正常退出，执行引擎遇到方法返回的字节码，将返回值传递给调用者</li>
<li>○ 异常退出，遇到Exception,并且方法未捕捉异常，那么不会有任何返回值。</li>
<li><p>额外附加信息，虚拟机规范没有明确规定，由具体虚拟机实现。<br>异常(Exception)<br>Java虚拟机规范规定该区域有两种异常：<br>● StackOverFlowError：当线程请求栈深度超出虚拟机栈所允许的深度时抛出<br>● OutOfMemoryError：当Java虚拟机动态扩展到无法申请足够内存时抛出</p>
<h2><span id="3-本地方法栈">3 本地方法栈</span></h2><p>本地方法栈则为虚拟机使用到的Native方法提供内存空间，而前面讲的虚拟机栈式为Java方法提供内存空间。有些虚拟机的实现直接把本地方法栈和虚拟机栈合二为一，比如非常典型的Sun HotSpot虚拟机。<br>异常(Exception)：Java虚拟机规范规定该区域可抛出StackOverFlowError和OutOfMemoryError。</p>
<h2><span id="4-java堆">4 Java堆</span></h2><p>Java堆，是Java虚拟机管理的最大的一块内存，也是GC的主战场，里面存放的是几乎所有的对象实例和数组数据。JIT编译器有栈上分配、标量替换等优化技术的实现导致部分对象实例数据不存在Java堆，而是栈内存。</p>
</li>
<li><p>从内存回收角度，Java堆被分为新生代和老年代；这样划分的好处是为了更快的回收内存；</p>
</li>
<li>从内存分配角度，Java堆可以划分出线程私有的分配缓冲区(Thread Local Allocation Buffer,TLAB)；这样划分的好处是为了更快的分配内存；<br>对象创建的过程是在堆上分配着实例对象，那么对象实例的具体结构如下：</li>
</ul>
<p>对于填充数据不是一定存在的，仅仅是为了字节对齐。HotSpot VM的自动内存管理要求对象起始地址必须是8字节的整数倍。对象头本身是8的倍数，当对象的实例数据不是8的倍数，便需要填充数据来保证8字节的对齐。该功能类似于高速缓存行的对齐。</p>
<p>另外，关于在堆上内存分配是并发进行的，虚拟机采用CAS加失败重试保证原子操作，或者是采用每个线程预先分配TLAB内存.<br>异常(Exception)：Java虚拟机规范规定该区域可抛出OutOfMemoryError。</p>
<h2><span id="5-方法区">5 方法区</span></h2><p>方法区主要存放的是已被虚拟机加载的类信息、常量、静态变量、编译器编译后的代码等数据。GC在该区域出现的比较少。<br>异常(Exception)：Java虚拟机规范规定该区域可抛出OutOfMemoryError。</p>
<h3><span id="运行时常量池">运行时常量池</span></h3><p>运行时常量池也是方法区的一部分，用于存放编译器生成的各种字面量和符号引用。运行时常量池除了编译期产生的Class文件的常量池，还可以在运行期间，将新的常量加入常量池，比较常见的是String类的intern()方法。</p>
<ol>
<li>字面量：与Java语言层面的常量概念相近，包含文本字符串、声明为final的常量值等。</li>
<li>符号引用：编译语言层面的概念，包括以下3类：</li>
</ol>
<ul>
<li>类和接口的全限定名</li>
<li>字段的名称和描述符</li>
<li>方法的名称和描述符</li>
</ul>
<p>但是该区域不会抛出OutOfMemoryError异常。</p>
<h5><span id="详情请看深入理解jvm虚拟机第二章38页"><strong>详情请看</strong>《深入理解JVM虚拟机》第二章38页</span></h5>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/surfer-2212948__480.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.xiangyu520.top/categories/Java/"/>
    
    
      <category term="JVM" scheme="http://www.xiangyu520.top/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Servlet的生命周期及实现原理</title>
    <link href="http://www.xiangyu520.top/Servlet/2017/09/09/Servlet%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%8F%8A%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86.html"/>
    <id>http://www.xiangyu520.top/Servlet/2017/09/09/Servlet的生命周期及实现原理.html</id>
    <published>2017-09-09T13:09:31.592Z</published>
    <updated>2017-09-14T11:28:35.483Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="/uploads/swan-1908290.jpg" alt="image"><br><a id="more"></a></p>
<h3><span id="生命周期分为三个阶段">生命周期分为三个阶段</span></h3><ul>
<li><h4><span id="初始化阶段">　初始化阶段</span></h4></li>
<li>调用init()方法</li>
<li><h4><span id="响应客户请求阶段">响应客户请求阶段　　</span></h4></li>
<li>调用service()方法</li>
<li><h4><span id="终止阶段">终止阶段　　</span></h4></li>
<li>调用destroy()方法</li>
</ul>
<h3><span id="1-servlet初始化阶段"><strong>1、Servlet初始化阶段</strong></span></h3><p>　　在下列时刻Servlet容器装载Servlet：
　　</p>
<ul>
<li>　Servlet容器启动时自动装载某些Servlet，实现它只需要在web.XML文件中的<servlet></servlet>之间添加如下代码：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;loadon-startup&gt;1&lt;/loadon-startup&gt;</div></pre></td></tr></table></figure>
<ul>
<li>　在Servlet容器启动后，客户首次向Servlet发送请求</li>
<li>　Servlet类文件被更新后，重新装载Servlet<br>　　Servlet被装载后，Servlet容器创建一个Servlet实例并且调用Servlet的init()方法进行初始化。<br>在Servlet的整个生命周期内，init()方法只被调用一次。</li>
</ul>
<h3><span id="2-servlet响应请求阶段">2、Servlet响应请求阶段</span></h3><p>　　对于用户到达Servlet的请求，Servlet容器会创建特定于这个请求的ServletRequest对象和ServletResponse对象，然后调用Servlet的service方法。service方法从ServletRequest对象获得客户请求信息，处理该请求，并通过ServletResponse对象向客户返回响应信息。<br>　　<br>对于Tomcat来说，它会将传递过来的参数放在一个Hashtable中，该Hashtable的定义是</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">private Hashtable&lt;String String[]&gt; paramHashStringArray = new Hashtable&lt;String String[]&gt;();</div></pre></td></tr></table></figure>
<p>　　这是一个String–&gt;String[]的键值映射。<br>　　HashMap线程不安全的，Hashtable线程安全。</p>
<h3><span id="3-servlet终止阶段">3、Servlet终止阶段</span></h3><p>　　当WEB应用被终止，或Servlet容器终止运行，或Servlet容器重新装载Servlet新实例时，Servlet容器会先调用Servlet的destroy()方法，在destroy()方法中可以释放掉Servlet所占用的资源。</p>
<h3><span id="servlet工作原理">Servlet工作原理</span></h3><p>　　首先客户发送一个请求，Servlet是调用service()方法对请求进行响应的，service()方法中对请求的方式进行了匹配，选择调用doGet,doPost等这些方法，然后再进入对应的方法中调用逻辑层的方法，实现对客户的响应。<br>　　<br>在Servlet接口和GenericServlet中是没有doGet,doPost等等这些方法的，HttpServlet中定义了这些方法，但是都是返回error信息，所以，我们每次定义一个Servlet的时候，都必须实现doGet或doPost等这些方法。</p>
<p>　　每一个自定义的Servlet都必须实现Servlet的接口，Servlet接口中定义了五个方法，其中比较重要的三个方法涉及到Servlet的生命周期，分别是上文提到的init(),service(),destroy()方法。GenericServlet是一个通用的，不特定于任何协议的Servlet,它实现了Servlet接口。而HttpServlet继承于GenericServlet，因此HttpServlet也实现了Servlet接口。所以我们定义Servlet的时候只需要继承HttpServlet即可。<br>　　<br>　　Servlet接口和GenericServlet是不特定于任何协议的，而HttpServlet是特定于HTTP协议的类，所以HttpServlet中实现了service()方法，并将请求ServletRequest,ServletResponse强转为HttpRequest和HttpResponse。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public void service(ServletRequest req,ServletResponse res) </div><div class="line">  throws ServletException,IOException</div><div class="line">&#123;</div><div class="line">      HttpRequest request;</div><div class="line">      HttpResponse response;</div><div class="line"> </div><div class="line">     try</div><div class="line">     &#123;</div><div class="line">         req = (HttpRequest)request;</div><div class="line">         res = (HttpResponse)response;</div><div class="line">      &#125;catch(ClassCastException e)</div><div class="line">      &#123;</div><div class="line">         throw new ServletException(&quot;non-HTTP request response&quot;); </div><div class="line">      &#125;</div><div class="line">      service(request,response);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>代码的最后调用了HTTPServlet自己的service(request,response)方法，然后根据请求去调用对应的doXXX方法，因为HttpServlet中的doXXX方法都是返回错误信息，所以需要我们在自定义的Servlet中override这些方法。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">protected void doGet(HttpServletRequest res,HttpServletResponse resp)</div><div class="line"> throws ServletException,IOException</div><div class="line">&#123;</div><div class="line"> String protocol = req.getProtocol();</div><div class="line"> String msg = IStrings.getString(&quot;http.method_get_not_supported&quot;);</div><div class="line"> if(protocol.equals(&quot;1.1&quot;))</div><div class="line"> &#123;</div><div class="line"> resp.sendError(HttpServletResponse.SC.METHOD.NOT.ALLOWED,msg);</div><div class="line"> &#125;</div><div class="line"> esle</div><div class="line"> &#123;</div><div class="line"> resp.sendError(HttpServletResponse.SC_BAD_REQUEST,msg);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/swan-1908290.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Servlet" scheme="http://www.xiangyu520.top/categories/Servlet/"/>
    
    
      <category term="Java面试" scheme="http://www.xiangyu520.top/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>深入理解HashMap</title>
    <link href="http://www.xiangyu520.top/Java/2017/09/06/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3HashMap.html"/>
    <id>http://www.xiangyu520.top/Java/2017/09/06/深入理解HashMap.html</id>
    <published>2017-09-06T13:10:53.817Z</published>
    <updated>2017-09-14T11:29:19.267Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="/uploads/surfing.jpg" alt="image"><br><a id="more"></a></p>
<h3><span id="hashmap概述">HashMap概述：</span></h3><p>HashMap是基于哈希表的Map接口的非同步实现。此实现提供所有可选的映射操作，并允许使用null值和null键。此类不保证映射的顺序，特别是它不保证该顺序恒久不变。</p>
<h3><span id="1-hashmap的数据结构">1、hashmap的数据结构</span></h3><p>要知道hashmap是什么，首先要搞清楚它的数据结构，在java编程语言中，最基本的结构就是两种，一个是数组，另外一个是模拟指针（引用），所有的数据结构都可以用这两个基本结构来构造的，hashmap也不例外。Hashmap实际上是一个数组和链表的结合体（在数据结构中，一般称之为“链表散列“），请看下图（横排表示数组，纵排表示数组元素实际上是一个链表）。 </p>
<p><img src="/uploads/beaa96fea07.jpeg" alt="image"></p>
<p>从图中我们可以看到一个hashmap就是一个数组结构，当新建一个hashmap的时候，就会初始化一个数组。我们来看看java代码： </p>
<p>Java代码  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1. /** </div><div class="line">2.      * The table, resized as necessary. Length MUST Always be a power of two. </div><div class="line">3.      *  FIXME 这里需要注意这句话，至于原因后面会讲到 </div><div class="line">4.      */  </div><div class="line">5.     transient Entry[] table;</div></pre></td></tr></table></figure>
<p>Java代码  </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">1. static class Entry&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;  </div><div class="line">2.         final K key;  </div><div class="line">3.         V value;  </div><div class="line">4.         final int hash;  </div><div class="line">5.         Entry&lt;K,V&gt; next;  </div><div class="line">6. ..........  </div><div class="line">7. &#125;</div></pre></td></tr></table></figure>
<p>上面的Entry就是数组中的元素，它持有一个指向下一个元素的引用，这就构成了链表。<br>当我们往hashmap中put元素的时候，先根据key的hash值得到这个元素在数组中的位置（即下标），然后就可以把这个元素放到对应的位置中了。如果这个元素所在的位子上已经存放有其他元素了，那么在同一个位子上的元素将以链表的形式存放，新加入的放在链头，最先加入的放在链尾。从hashmap中get元素时，首先计算key的hashcode，找到数组中对应位置的某一元素，然后通过key的equals方法在对应位置的链表中找到需要的元素。从这里我们可以想象得到，如果每个位置上的链表只有一个元素，那么hashmap的get效率将是最高的，但是理想总是美好的，现实总是有困难需要我们去克服，哈哈~</p>
<h3><span id="2-hash算法">2、hash算法</span></h3><p>我们可以看到在hashmap中要找到某个元素，需要根据key的hash值来求得对应数组中的位置。如何计算这个位置就是hash算法。前面说过hashmap的数据结构是数组和链表的结合，所以我们当然希望这个hashmap里面的元素位置尽量的分布均匀些，尽量使得每个位置上的元素数量只有一个，那么当我们用hash算法求得这个位置的时候，马上就可以知道对应位置的元素就是我们要的，而不用再去遍历链表。 </p>
<p>所以我们首先想到的就是把hashcode对数组长度取模运算，这样一来，元素的分布相对来说是比较均匀的。但是，“模”运算的消耗还是比较大的，能不能找一种更快速，消耗更小的方式那？java中时这样做的， </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Java代码  </div><div class="line"></div><div class="line">  1. static int indexFor(int h, int length) &#123;  </div><div class="line">  2.        return h &amp; (length-1);  </div><div class="line">  3.    &#125;</div></pre></td></tr></table></figure>
<p>首先算得key得hashcode值，然后跟数组的长度-1做一次“与”运算（&amp;）。看上去很简单，其实比较有玄机。比如数组的长度是2的4次方，那么hashcode就会和2的4次方-1做“与”运算。很多人都有这个疑问，为什么hashmap的数组初始化大小都是2的次方大小时，hashmap的效率最高，我以2的4次方举例，来解释一下为什么数组大小为2的幂时hashmap访问的性能最高。 </p>
<p>看下图，左边两组是数组长度为16（2的4次方），右边两组是数组长度为15。两组的hashcode均为8和9，但是很明显，当它们和1110“与”的时候，产生了相同的结果，也就是说它们会定位到数组中的同一个位置上去，这就产生了碰撞，8和9会被放到同一个链表上，那么查询的时候就需要遍历这个链表，得到8或者9，这样就降低了查询的效率。同时，我们也可以发现，当数组长度为15的时候，hashcode的值会与14（1110）进行“与”，那么最后一位永远是0，而0001，0011，0101，1001，1011，0111，1101这几个位置永远都不能存放元素了，空间浪费相当大，更糟的是这种情况中，数组可以使用的位置比数组长度小了很多，这意味着进一步增加了碰撞的几率，减慢了查询的效率！ </p>
<p><img src="/uploads/720691f40d3.jpeg" alt="image"></p>
<p> 所以说，当数组长度为2的n次幂的时候，不同的key算得得index相同的几率较小，那么数据在数组上分布就比较均匀，也就是说碰撞的几率小，相对的，查询的时候就不用遍历某个位置上的链表，这样查询效率也就较高了。 </p>
<p>说到这里，我们再回头看一下hashmap中默认的数组大小是多少，查看源代码可以得知是16，为什么是16，而不是15，也不是20呢，看到上面annegu的解释之后我们就清楚了吧，显然是因为16是2的整数次幂的原因，在小数据量的情况下16比15和20更能减少key之间的碰撞，而加快查询的效率。 </p>
<p>所以，在存储大容量数据的时候，最好预先指定hashmap的size为2的整数次幂次方。就算不指定的话，也会以大于且最接近指定值大小的2次幂来初始化的，代码如下(HashMap的构造方法中)： </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Java代码  </div><div class="line"></div><div class="line">  1. // Find a power of 2 &gt;= initialCapacity  </div><div class="line">  2.         int capacity = 1;  </div><div class="line">  3.         while (capacity &lt; initialCapacity)   </div><div class="line">  4.             capacity &lt;&lt;= 1;</div></pre></td></tr></table></figure>
<h3><span id="3-hashmap的resize">3、hashmap的resize</span></h3><p>当hashmap中的元素越来越多的时候，碰撞的几率也就越来越高（因为数组的长度是固定的），所以为了提高查询的效率，就要对hashmap的数组进行扩容，数组扩容这个操作也会出现在ArrayList中，所以这是一个通用的操作，很多人对它的性能表示过怀疑，不过想想我们的“均摊”原理，就释然了，而在hashmap数组扩容之后，最消耗性能的点就出现了：原数组中的数据必须重新计算其在新数组中的位置，并放进去，这就是resize。 </p>
<p>那么hashmap什么时候进行扩容呢？当hashmap中的元素个数超过数组大小<em>loadFactor时，就会进行数组扩容，loadFactor的默认值为0.75，也就是说，默认情况下，数组大小为16，那么当hashmap中元素个数超过16</em>0.75=12的时候，就把数组的大小扩展为2<em>16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常消耗性能的操作，所以如果我们已经预知hashmap中元素的个数，那么预设元素的个数能够有效的提高hashmap的性能。比如说，我们有1000个元素new HashMap(1000), 但是理论上来讲new HashMap(1024)更合适，不过上面annegu已经说过，即使是1000，hashmap也自动会将其设置为1024。 但是new HashMap(1024)还不是更合适的，因为0.75</em>1000 &lt; 1000, 也就是说为了让0.75 * size &gt; 1000, 我们必须这样new HashMap(2048)才最合适，既考虑了&amp;的问题，也避免了resize的问题。 </p>
<h3><span id="4-key的hashcode与equals方法改写">4、key的hashcode与equals方法改写</span></h3><p>在第一部分hashmap的数据结构中，annegu就写了get方法的过程：首先计算key的hashcode，找到数组中对应位置的某一元素，然后通过key的equals方法在对应位置的链表中找到需要的元素。所以，hashcode与equals方法对于找到对应元素是两个关键方法。 </p>
<p>Hashmap的key可以是任何类型的对象，例如User这种对象，为了保证两个具有相同属性的user的hashcode相同，我们就需要改写hashcode方法，比方把hashcode值的计算与User对象的id关联起来，那么只要user对象拥有相同id，那么他们的hashcode也能保持一致了，这样就可以找到在hashmap数组中的位置了。如果这个位置上有多个元素，还需要用key的equals方法在对应位置的链表中找到需要的元素，所以只改写了hashcode方法是不够的，equals方法也是需要改写滴~当然啦，按正常思维逻辑，equals方法一般都会根据实际的业务内容来定义，例如根据user对象的id来判断两个user是否相等。<br>在改写equals方法的时候，需要满足以下三点： </p>
<ul>
<li>(1) 自反性：就是说a.equals(a)必须为true。 </li>
<li>(2) 对称性：就是说a.equals(b)=true的话，b.equals(a)也必须为true。 </li>
<li>(3) 传递性：就是说a.equals(b)=true，并且b.equals(c)=true的话，a.equals(c)也必须为true。<br>通过改写key对象的equals和hashcode方法，我们可以将任意的业务对象作为map的key(前提是你确实有这样的需要)。 </li>
</ul>
<h3><span id="总结">总结：</span></h3><p> 本文主要描述了HashMap的结构，和hashmap中hash函数的实现，以及该实现的特性，同时描述了hashmap中resize带来性能消耗的根本原因，以及将普通的域模型对象作为key的基本要求。尤其是hash函数的实现，可以说是整个HashMap的精髓所在，只有真正理解了这个hash函数，才可以说对HashMap有了一定的理解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/surfing.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.xiangyu520.top/categories/Java/"/>
    
    
      <category term="Java集合" scheme="http://www.xiangyu520.top/tags/Java%E9%9B%86%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>深入理解ArrayList</title>
    <link href="http://www.xiangyu520.top/Java/2017/09/05/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ArrayList.html"/>
    <id>http://www.xiangyu520.top/Java/2017/09/05/深入理解ArrayList.html</id>
    <published>2017-09-05T11:11:10.279Z</published>
    <updated>2017-09-14T11:36:47.395Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="/uploads/waterfall-2271231__480.jpg" alt="image"><br><a id="more"></a></p>
<blockquote>
<p><strong>ArrayList概述</strong></p>
</blockquote>
<p>ArrayList是List接口的可变数组的实现。实现了所有可选列表操作，并允许包括 null 在内的所有元素。除了实现 List 接口外，此类还提供一些方法来操作内部用来存储列表的数组的大小。</p>
<p>   每个ArrayList实例都有一个容量，该容量是指用来存储列表元素的数组的大小。它总是至少等于列表的大小。随着向ArrayList中不断添加元素，其容量也自动增长。自动增长会带来数据向新数组的重新拷贝，因此，如果可预知数据量的多少，可在构造ArrayList时指定其容量。在添加大量元素前，应用程序也可以使用ensureCapacity操作来增加ArrayList实例的容量，这可以减少递增式再分配的数量。 </p>
<p>   <strong><em>注意</em></strong>，此实现不是同步的。如果多个线程同时访问一个ArrayList实例，而其中至少一个线程从结构上修改了列表，那么它必须保持外部同步。</p>
<blockquote>
<p>ArrayList的实现</p>
</blockquote>
<p>   对于ArrayList而言，它实现List接口、底层使用数组保存所有元素。其操作基本上是对数组的操作。下面我们来分析ArrayList的源代码</p>
<ul>
<li><strong>底层使用数组实现</strong>：</li>
</ul>
<p>Java代码  </p>
<pre><code>private transient Object[] elementData;  
</code></pre><ul>
<li><strong>构造方法</strong>：<br> ArrayList提供了三种方式的构造器，可以构造一个默认初始容量为10的空列表、构造一个指定初始容量的空列表以及构造一个包含指定collection的元素的列表，这些元素按照该collection的迭代器返回它们的顺序排列的。</li>
</ul>
<p>Java代码  </p>
<pre><code>1. public ArrayList() {  
 2.     this(10);  
 3. }  
 4.   
 5. public ArrayList(int initialCapacity) {  
 6.     super();  
 7.     if (initialCapacity &lt; 0)  
 8.         throw new IllegalArgumentException(&quot;Illegal Capacity: &quot;+ initialCapacity);  
 9.     this.elementData = new Object[initialCapacity];  
 10. }  
 11.   
 12. public ArrayList(Collection&lt;? extends E&gt; c) {  
 13.     elementData = c.toArray();  
 14.     size = elementData.length;  
 15.     // c.toArray might (incorrectly) not return Object[] (see 6260652)  
 16.     if (elementData.getClass() != Object[].class)  
 17.         elementData = Arrays.copyOf(elementData, size, Object[].class);  
 18. }  
</code></pre><ul>
<li><p><strong>存储</strong>：</p>
<p>ArrayList提供了set(int index, E element)、add(E e)、add(int index, E element)、addAll(Collection&lt;? extends E&gt; c)、addAll(int index, Collection&lt;? extends E&gt; c)这些添加元素的方法。下面我们一一讲解：</p>
</li>
</ul>
<p><em>Java代码</em>  </p>
<pre><code>1. // 用指定的元素替代此列表中指定位置上的元素，并返回以前位于该位置上的元素。  
 2. public E set(int index, E element) {  
 3.     RangeCheck(index);  
 4.   
 5.     E oldValue = (E) elementData[index];  
 6.     elementData[index] = element;  
 7.     return oldValue;  
 8. }  
</code></pre><p>Java代码  </p>
<pre><code>1. // 将指定的元素添加到此列表的尾部。  
2. public boolean add(E e) {  
3.     ensureCapacity(size + 1);   
4.     elementData[size++] = e;  
5.     return true;  
6. }  
</code></pre><p>Java代码  </p>
<pre><code>1. // 将指定的元素插入此列表中的指定位置。  
2. // 如果当前位置有元素，则向右移动当前位于该位置的元素以及所有后续元素（将其索引加1）。  
3. public void add(int index, E element) {  
4.     if (index &gt; size || index &lt; 0)  
5.         throw new IndexOutOfBoundsException(&quot;Index: &quot;+index+&quot;, Size: &quot;+size);  
6.     // 如果数组长度不足，将进行扩容。  
7.     ensureCapacity(size+1);  // Increments modCount!!  
8.     // 将 elementData中从Index位置开始、长度为size-index的元素，  

9.     // 拷贝到从下标为index+1位置开始的新的elementData数组中


10.     // 即将当前位于该位置的元素以及所有后续元素右移一个位置。  
11.     System.arraycopy(elementData, index, elementData, index + 1, size - index);  
12.     elementData[index] = element;  
13.     size++;  
14. }  
</code></pre><p>Java代码  </p>
<pre><code>1. // 按照指定collection的迭代器所返回的元素顺序，将该collection中的所有元素添加到此列表的尾部。  
2. public boolean addAll(Collection&lt;? extends E&gt; c) {  
3.     Object[] a = c.toArray();  
4.     int numNew = a.length;  
5.     ensureCapacity(size + numNew);  // Increments modCount  
6.     System.arraycopy(a, 0, elementData, size, numNew);  
7.     size += numNew;  
8.     return numNew != 0;  
9. }  
</code></pre><p>Java代码  </p>
<pre><code> 1. // 从指定的位置开始，将指定collection中的所有元素插入到此列表中。  
  2. public boolean addAll(int index, Collection&lt;? extends E&gt; c) {  
  3.     if (index &gt; size || index &lt; 0)  
  4.         throw new IndexOutOfBoundsException(  
  5.             &quot;Index: &quot; + index + &quot;, Size: &quot; + size);  
  6.   
  7.     Object[] a = c.toArray();  
  8.     int numNew = a.length;  
  9.     ensureCapacity(size + numNew);  // Increments modCount  
  10.   
  11.     int numMoved = size - index;  
  12.     if (numMoved &gt; 0)  
  13.         System.arraycopy(elementData, index, elementData, index + numNew, numMoved);  
  14.   
  15.     System.arraycopy(a, 0, elementData, index, numNew);  
  16.     size += numNew;  
  17.     return numNew != 0;  
  18. }  
    4) 读取：
Java代码  

  1. // 返回此列表中指定位置上的元素。  
  2. public E get(int index) {  
  3.     RangeCheck(index);  
  4.   
  5.     return (E) elementData[index];  
  6. }  
</code></pre><ul>
<li><p><strong>删除</strong>： </p>
<p> ArrayList提供了根据下标或者指定对象两种方式的删除功能。如下：<br>Java代码  </p>
</li>
</ul>
<pre><code>1. // 移除此列表中指定位置上的元素。  
 2. public E remove(int index) {  
 3.     RangeCheck(index);  
 4.   
 5.     modCount++;  
 6.     E oldValue = (E) elementData[index];  
 7.   
 8.     int numMoved = size - index - 1;  
 9.     if (numMoved &gt; 0)  
 10.         System.arraycopy(elementData, index+1, elementData, index, numMoved);  
 11.     elementData[--size] = null; // Let gc do its work  
 12.   
 13.     return oldValue;  
 14. }  
</code></pre><p>Java代码  </p>
<pre><code>1. // 移除此列表中首次出现的指定元素（如果存在）。这是应为ArrayList中允许存放重复的元素。  
2. public boolean remove(Object o) {  
3.     // 由于ArrayList中允许存放null，因此下面通过两种情况来分别处理。  
4.     if (o == null) {  
5.         for (int index = 0; index &lt; size; index++)  
6.             if (elementData[index] == null) {  
7.                 // 类似remove(int index)，移除列表中指定位置上的元素。  
8.                 fastRemove(index);  
9.                 return true;  
10.             }  
11. } else {  
12.     for (int index = 0; index &lt; size; index++)  
13.         if (o.equals(elementData[index])) {  
14.             fastRemove(index);  
15.             return true;  
16.         }  
17.     }  
18.     return false;  
19. }  
</code></pre><p> <strong><em>注意</em></strong>：从数组中移除元素的操作，也会导致被移除的元素以后的所有元素的向左移动一个位置。</p>
<ul>
<li><strong>调整数组容量</strong>：<br>从上面介绍的向ArrayList中存储元素的代码中，我们看到，每当向数组中添加元素时，都要去检查添加后元素的个数是否会超出当前数组的长度，如果超出，数组将会进行扩容，以满足添加数据的需求。数组扩容通过一个公开的方法ensureCapacity(int minCapacity)来实现。在实际添加大量元素前，我也可以使用ensureCapacity来手动增加ArrayList实例的容量，以减少递增式再分配的数量。</li>
</ul>
<p>Java代码  </p>
<pre><code>  public void ensureCapacity(int minCapacity) {  
      Count++;  
   int oldCapacity = elementData.length;  
    if (minCapacity &gt; oldCapacity) {  
        Object oldData[] = elementData;  
        int newCapacity = (oldCapacity * 3)/2 + 1;  
             if (newCapacity &lt; minCapacity)  
                  newCapacity = minCapacity;  
        // minCapacity is usually close to size, so this is a win:  
        elementData = Arrays.copyOf(elementData, newCapacity);  
       }  
}  
</code></pre><p>   从上述代码中可以看出，数组进行扩容时，会将老数组中的元素重新拷贝一份到新的数组中，每次数组容量的增长大约是其原容量的1.5倍。这种操作的代价是很高的，因此在实际使用时，我们应该尽量避免数组容量的扩张。当我们可预知要保存的元素的多少时，要在构造ArrayList实例时，就指定其容量，以避免数组扩容的发生。或者根据实际需求，通过调用ensureCapacity方法来手动增加ArrayList实例的容量。</p>
<p>   ArrayList还给我们提供了将底层数组的容量调整为当前列表保存的实际元素的大小的功能。它可以通过trimToSize方法来实现。代码如下：<br>Java代码  </p>
<pre><code>1. public void trimToSize() {  
  2.     modCount++;  
  3.     int oldCapacity = elementData.length;  
  4.     if (size &lt; oldCapacity) {  
  5.         elementData = Arrays.copyOf(elementData, size);  
  6.     }  
  7. }  
</code></pre><ul>
<li><strong>Fail-Fast机制</strong>：<br>ArrayList也采用了快速失败的机制，通过记录modCount参数来实现。在面对并发的修改时，迭代器很快就会完全失败，而不是冒着在将来某个不确定时间发生任意不确定行为的风险。具体介绍请参考我之前的文章深入Java集合学习系列：HashMap的实现原理 中的Fail-Fast机制。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/waterfall-2271231__480.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="http://www.xiangyu520.top/categories/Java/"/>
    
    
      <category term="Java面试" scheme="http://www.xiangyu520.top/tags/Java%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>MySQL的性能和伸缩性优化</title>
    <link href="http://www.xiangyu520.top/MySQL/2017/08/01/MySQL%E7%9A%84%E6%80%A7%E8%83%BD%E5%92%8C%E4%BC%B8%E7%BC%A9%E6%80%A7%E4%BC%98%E5%8C%96.html"/>
    <id>http://www.xiangyu520.top/MySQL/2017/08/01/MySQL的性能和伸缩性优化.html</id>
    <published>2017-08-01T02:20:37.202Z</published>
    <updated>2017-09-14T11:37:36.649Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="/uploads/desert-2340326__480.jpg" alt="image"><br><a id="more"></a></p>
<h4><span id="1-选择-innodb-作为存储引擎">1、选择 InnoDB 作为存储引擎</span></h4><ul>
<li>大型产品的数据库对于可靠性和并发性的要求较高，InnoDB 作为默认的 MySQL 存储引擎，相对于 MyISAM 来说是个更佳的选择。</li>
</ul>
<h4><span id="2-优化数据库结构">2、优化数据库结构</span></h4><ul>
<li><p>组织数据库的 schema、表和字段以降低 I/O 的开销，将相关项保存在一起，并提前规划，以便随着数据量的增长，性能可以保持较高的水平。</p>
</li>
<li><p>设计数据表应尽量使其占用的空间最小化，表的主键应尽可能短。</p>
</li>
<li><p>对于 InnoDB 表，主键所在的列在每个辅助索引条目中都是可复制的，因此如果有很多辅助索引，那么一个短的主键可以节省大量空间。</p>
</li>
<li><p>仅创建你需要改进查询性能的索引。索引有助于检索，但是会增加插入和更新操作的执行时间。</p>
</li>
</ul>
<h4><span id="3-innodb-的-change-buffering-特性">3、InnoDB 的 Change Buffering 特性</span></h4><ul>
<li>InnoDB 提供了 change buffering 的配置，可减少维护辅助索引所需的磁盘 I/O。大规模的数据库可能会遇到大量的表操作和大量的 I/O，以保证辅助索引保持最新。当相关页面不在缓冲池里面时，InnoDB 的 change buffer 将会更改缓存到辅助索引条目，从而避免因不能立即从磁盘读取页面而导致耗时的 I/O 操作。当页面被加载到缓冲池时，缓冲的更改将被合并，更新的页面之后会刷新到磁盘。这样做可提高性能，适用于 MySQL 5.5 及更高版本。</li>
</ul>
<h4><span id="4-innodb-页面压缩">4、InnoDB 页面压缩</span></h4><ul>
<li><p>InnoDB 支持对表进行页面级的压缩。当写入数据页的时候，会有特定的压缩算法对其进行压缩。压缩后的数据会写入磁盘，其打孔机制会释放页面末尾的空块。如果压缩失败，数据会按原样写入。表和索引都会被压缩，因为索引通常是数据库总大小中占比很大的一部分，压缩可以显著节约内存，I/O 或处理时间，这样就达到了提高性能和伸缩性的目的。它还可以减少内存和磁盘之间传输的数据量。MySQL 5.1 及更高版本支持该功能。</p>
</li>
<li><p><strong>注意</strong>，页面压缩并不能支持共享表空间中的表。共享表空间包括系统表空间、临时表空间和常规表空间。</p>
</li>
</ul>
<h4><span id="5-使用批量数据导入">5、使用批量数据导入</span></h4><p>在主键上使用已排序的数据源进行批量数据的导入可加快数据插入的过程。否则，可能需要在其他行之间插入行以维护排序，这会导致磁盘 I/O 变高，进而影响性能，增加页的拆分。关闭自动提交的模式也是有好处的，因为它会为每个插入执行日志刷新到磁盘。在批量插入期间临时转移唯一键和外键检查也可显著降低磁盘 I/O。对于新建的表，最好的做法是在批量导入后创建外键/唯一键约束。</p>
<h4><span id="6-sql-语句优化">6、SQL 语句优化</span></h4><ul>
<li><p>为了提升查询的速度，可以为 WHERE 字句中使用的列添加索引。此外，不要将主键索引用于太多或太长的列，因为这些列值在辅助索引进行复制的时候会增加读取所需要的 I/O 资源并占用缓存。</p>
</li>
<li><p>如果索引包含了不必要的数据，通过 I/O 读取这些数据并进行缓存就会减弱服务器的性能和伸缩性。也不要为不必要的列使用唯一键索引，因为它会禁用 change buffering。应该使用常规索引代替。</p>
</li>
<li><p>减少和隔离需要耗费大量时间的函数调用。</p>
</li>
<li><p>尽可能的减少查询中的全表扫描次数。</p>
</li>
<li><p>调整缓存区域的大小和属性，比如 InnoDB 缓冲池，MySQL 查询缓存等，这样会通过从内存而非从硬盘获取数据而让重复的查询变得更快。</p>
</li>
</ul>
<h4><span id="7-优化存储结构">7、优化存储结构</span></h4><ul>
<li><p>对于大型的表，或者包含大量重复文本或数值数据的表，应该考虑使用 COMPRESSED(压缩的) 行格式。这样只需要较少的 I/O 就可以把数据取到缓冲池，或执行全表扫描。</p>
</li>
<li><p>一旦你的数据达到稳定的大小，或者增长的表增加了几十或几百兆字节，就应该考虑使用 OPTIMIZE TABLE 语句重新组织表并压缩浪费的空间。对重新组织后的表进行全表扫描所需要的 I/O 会更少。</p>
</li>
</ul>
<h4><span id="8-优化-innodb-磁盘-io">8、优化 InnoDB 磁盘 I/O</span></h4><ul>
<li><p>增加 InnoDB 缓冲池大小可以让查询从缓冲池访问而不是通过磁盘 I/O 访问。通过调整系统变量 innodb_flush_method 来调整清除缓冲的指标使其达到最佳水平。</p>
</li>
<li><p>使用其它存储设备配置 RAID</p>
</li>
</ul>
<h4><span id="9-mysql-的内存分配">9、MySQL 的内存分配</span></h4><ul>
<li><p>在为 MySQL 分配足够的内存之前，请考虑不同领域对 MySQL 的内存需求。</p>
</li>
<li><p>要考虑的关键领域是：并发连接 —— 对于大量并发连接，排序和临时表将需要大量内存。在撰写本文时，对于处理 3000+ 并发连接的数据库，16GB 到 32GB的 RAM 是足够的。</p>
</li>
<li><p>内存碎片可以消耗大约 10％ 或更多的内存。像 innodb_buffer_pool_size、key_buffer_size、query_cache_size 等缓存和缓冲区要消耗大约 80％ 的已分配内存。</p>
</li>
</ul>
<h4><span id="10-日常维护">10、日常维护</span></h4><ul>
<li><p>定期检查慢的查询日志并优化查询机制以有效使用缓存来减少磁盘 I/O。优化它们，以扫描最少的行数，而不是进行全表扫描。</p>
</li>
<li><p>其他可以帮助 DBA 检查和分析性能的日志包括：错误日志、常规查询日志、二进制日志、DDL日志（元数据日志）。</p>
</li>
<li><p>定期刷新缓存和缓冲区以降低碎片化。使用 OPTIMIZE TABLE 语句重新组织表并压缩任何可能被浪费的空间。</p>
</li>
</ul>
<h6><span id="文章摘录链接"></span></h6>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/desert-2340326__480.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="MySQL" scheme="http://www.xiangyu520.top/categories/MySQL/"/>
    
    
      <category term="MySQL优化" scheme="http://www.xiangyu520.top/tags/MySQL%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>centOS环境搭建（一）</title>
    <link href="http://www.xiangyu520.top/Linux/2017/07/31/linux%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://www.xiangyu520.top/Linux/2017/07/31/linux搭建（一）.html</id>
    <published>2017-07-31T10:17:05.421Z</published>
    <updated>2017-09-14T11:38:27.042Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text/css" href="/assets/css/DPlayer.min.css"><script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><img src="/uploads/cherries-1465801__480.jpg" alt="image"><br><a id="more"></a></p>
<h1><span id="阿里云ecs服务器centos65安装jdkmysqltomcat">阿里云ECS服务器,centos6.5安装jdk，mysql，tomcat</span></h1><p>现在很多博客上都有很多莫名的错误，我试着总结以下吧，希望减少时间的浪费，说实话我搭建了1天多才完全弄好，原因就是很多文档博客都不缜密，会出现很多错</p>
<p><strong>前提</strong>下载安装xshell（具体如何是使用xshell请自行Google）和xftp</p>
<h4><span id="1-部署jdk">1 部署jdk</span></h4><pre><code>查看系统是否安装了jdk
</code></pre><p> [root@localhost ~]# java -version或者 [root@localhost ~]#rpm -qa |grep java</p>
<p> 出现或者不出现以下内容：</p>
<p>java version “1.7.0_24”<br>OpenJDK Runtime Environment (build 1.7.0_24-b18)<br>OpenJDK HotSpot(TM) Client VM (build 24.45-b08, mixed mode, sharing)</p>
<p>进一步查看JDK信息：<br>[root@localhost ~]# rpm -qa | grep java<br>tzdata-java-2012c-1.el6.noarch<br>java-1.7.0-openjdk-1.7.0.45-1.45.1.11.1.el6.x86_64</p>
<p>卸载OpenJDK，执行以下操作：<br>[root@localhost ~]# rpm -e –nodeps tzdata-java-2012c-1.el6.noarch（解压jdk）<br>[root@localhost ~]# rpm -e –nodeps java-1.7.0-openjdk-1.7.0.45-1.45.1.11.1.el6.x86_64</p>
<p>若出现以上以上情况，按照以上步骤操作完后，用xftp上传jdk-7-linux-i586.rpm或者jdk-8u25-linux-x64.tar.gz（具体jdk版本看你自己选择，在Oracle官网上下载  ）到xftp上的/usr/local</p>
<h5><span id="2-安装jdkjdk默认安装在usrjava中">2 安装jdk（JDK默认安装在/usr/java中）：</span></h5><p>[root@localhost  ~]#cd /usr/local (cd 空格后路径是你刚刚上传到xftp的路径，<strong>不要搞错了，我上是传到/usr/local</strong>，这一点很多博客文档都没说清楚，导致很多初学者会具体操作时出错)<br>[root@localhost ckb]# rpm -ivh jdk-7-linux-i586.rpm或者[root@localhost ckb]#tar –zxvf jdk-8u25-linux-x64.tar.gz</p>
<h5><span id="3-验证安装">3 验证安装</span></h5><p>执行以下操作，查看信息是否正常：</p>
<p>[root@localhost bin]# java</p>
<p>[root@localhost bin]# javac</p>
<p>[root@localhost bin]# java -version</p>
<p>java version “1.7.0_45”<br>Java(TM) SE Runtime Environment (build 1.7.0_45-b18)<br>Java HotSpot(TM) Client VM (build 24.45-b08, mixed mode, sharing)</p>
<h5><span id="4-配置环境变量">4 配置环境变量</span></h5><p>我的机器安装完jdk-7-linux-i586.rpm后不用配置环境变量也可以正常执行javac、java –version操作，因此我没有进行JDK环境变量的配置。</p>
<p>但是为了以后的不适之需，这里还是记录一下怎么进行配置，操作如下：<br>修改系统环境变量文件<br>vi + /etc/profile<br>执行之后 按”i”建，INSERT出现表示可以编辑<br>向文件里面追加以下内容：</p>
<p>在光标处添加<br>JAVA_HOME=/usr/java/jdk1.7.0_45</p>
<p>JRE_HOME=/usr/java/jdk1.7.0_45/jre</p>
<p>PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</p>
<p>CLASSPATH=:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib<br>export JAVA_HOME JRE_HOME PATH CLASSPATH<br>（然后按Esc退出，”:”符+ wq保存并退出）</p>
<p>使修改生效<br>[root@localhost ~]# source /etc/profile<br>（使修改立即生效）</p>
<p>[root@localhost ~]# echo $PATH<br>（查看PATH值）</p>
<p>查看系统环境状态</p>
<p>[root@localhost ~]# echo $PATH<br>/usr/lib/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/java/jdk1.7.0_45/bin:<br>/usr/java/jdk1.7.0_45/jre/bin:/home/ckb/bin</p>
<h3><span id="二-部署tomcat与配置jdk类似">二、部署tomcat(与配置jdk类似)</span></h3><p>在tomcat官网上下载 apache-tomcat-8.0.15.tar.gz并上传到/usr/local</p>
<p>[root@localhost ~]#cd /usr/local</p>
<p>[root@localhost local]#tar –zxvf apache-tomcat-8.0.15.tar.gz</p>
<p>初始化配置：<br>[root@localhost ~]#vi catalina.sh<br>//设置环境变量</p>
<p>末行添加：<br>JAVA_HOME=/usr/java<br>CATALINA_HOME=/usr/local/apache-tomcat-8.0.15<br>export JAVA_HOME PATH<br>（然后按Esc退出，”:”符+ wq保存并退出）</p>
<h5><span id="启动tomcat">启动tomcat</span></h5><p>进入tomcat/bin目录</p>
<p>[root@localhost ~]#cd /usr/local/apache-tomcat-8.0.15/lib</p>
<p>[root@localhost bin] #  ./startup.sh<br>[root@localhost bin] # ./shutdown.sh //关闭tomcat</p>
<p>启动之后就可以在浏览器输入你的公网ip:8080（tomcat默认端口），看到tomcat页面。</p>
<h4><span id="三-配置mysql">三  配置mysql</span></h4><p>（我的这里参考了<a href="http://note.youdao.com/" target="_blank" rel="external">http://blog.csdn.net/sapce_fish/article/details/51619830?locationNum=12&amp;fps=1</a>这篇博客，版本为mysql.x86_64 5.1.73-7.el6，当然你也可以安装其他版本）</p>
<p>安装mysql；==<strong>特别注意</strong>==：网上很多安装mysql的文章，都是不行的！！！！</p>
<p>#我喜欢在home目录操作命令<br>cd /home</p>
<p>#查看所有以mysql开头的软件</p>
<p>yum list mysql*</p>
<p>#安装mysql</p>
<p>yum install mysql-server* -y</p>
<p>#启动mysql</p>
<p>/etc/init.d/mysqld start</p>
<p>#设定mysql自动启动，我亲自重启了ECS，确实ok</p>
<p>chkconfig mysqld on</p>
<p>#复制mysql的配置文件到etc目录，提示是否覆盖，选择y<br>cp /usr/share/mysql/my-medium.cnf   /etc/my.cnf</p>
<p>#重新设定mysql密码，默认密码是【空】，输入新密码，注意提问，是否删除匿名账户？【y】  是否禁止远程登录？【n】是否移除test数据库?【y】是否重载权限文件【y】<br>mysql_secure_installation</p>
<p>#重启mysql，此时用本机Navicat Premium还是连不上mysql的！<br>/etc/init.d/mysqld restart</p>
<p>#用命令访问mysql<br>mysql -u root -p</p>
<p>#使用mysql数据库<br>use mysql;</p>
<p>#查询当前用户情况，显示有3条记录，127.0.0.1；localhost；izxxxxxxxdz；其中最后这个是ECS主机名</p>
<p>select host, user from user;  </p>
<p>#把localhost这条记录的host改为 %； 意思是root可以由任何主机登录mysql，网上很多写法，都没有and host=’localhost’这个条件，经常报错。<br>update user set host = ‘%’ where user = ‘root’ and host=’localhost’;</p>
<p>#再次查询，可以看到host有3个；%；127.0.0.1；izxxxxxxxdz；其实user表的主键是user字段和host字段的联合主键。<br>select host, user from user;</p>
<p>#保险起见，重启mysql，Navicat Premium连接正常！万岁！<br>/etc/init.d/mysqld restart</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/uploads/cherries-1465801__480.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://www.xiangyu520.top/categories/Linux/"/>
    
    
      <category term="Linux搭建" scheme="http://www.xiangyu520.top/tags/Linux%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
</feed>

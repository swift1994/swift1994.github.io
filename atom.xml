<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>平湖烟雨</title>
  <subtitle>Never give up</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.xiangyu520.top/"/>
  <updated>2017-07-31T10:16:10.438Z</updated>
  <id>http://www.xiangyu520.top/</id>
  
  <author>
    <name>项昱</name>
    <email>robertneon94@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title></title>
    <link href="http://www.xiangyu520.top/uncategorized/2017/07/31/linux%E6%90%AD%E5%BB%BA%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://www.xiangyu520.top/uncategorized/2017/07/31/linux搭建（一）.html</id>
    <published>2017-07-31T10:17:05.421Z</published>
    <updated>2017-07-31T10:16:10.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="阿里云ECS服务器-centos6-5安装jdk，mysql，tomcat"><a href="#阿里云ECS服务器-centos6-5安装jdk，mysql，tomcat" class="headerlink" title="阿里云ECS服务器,centos6.5安装jdk，mysql，tomcat"></a>阿里云ECS服务器,centos6.5安装jdk，mysql，tomcat</h1><p>现在很多博客上都有很多莫名的错误，我试着总结以下吧，希望减少时间的浪费，说实话我搭建了1天多才完全弄好，原因就是很多文档博客都不缜密，会出现很多错</p>
<p><strong>前提</strong>下载安装xshell（具体如何是使用xshell请自行Google）和xftp</p>
<h4 id="1-部署jdk"><a href="#1-部署jdk" class="headerlink" title="1 部署jdk"></a>1 部署jdk</h4><pre><code>查看系统是否安装了jdk
</code></pre><p> [root@localhost ~]# java -version或者 [root@localhost ~]#rpm -qa |grep java</p>
<p> 出现或者不出现以下内容：</p>
<p>java version “1.7.0_24”<br>OpenJDK Runtime Environment (build 1.7.0_24-b18)<br>OpenJDK HotSpot(TM) Client VM (build 24.45-b08, mixed mode, sharing)</p>
<p>进一步查看JDK信息：<br>[root@localhost ~]# rpm -qa | grep java<br>tzdata-java-2012c-1.el6.noarch<br>java-1.7.0-openjdk-1.7.0.45-1.45.1.11.1.el6.x86_64</p>
<p>卸载OpenJDK，执行以下操作：<br>[root@localhost ~]# rpm -e –nodeps tzdata-java-2012c-1.el6.noarch（解压jdk）<br>[root@localhost ~]# rpm -e –nodeps java-1.7.0-openjdk-1.7.0.45-1.45.1.11.1.el6.x86_64</p>
<p>若出现以上以上情况，按照以上步骤操作完后，用xftp上传jdk-7-linux-i586.rpm或者jdk-8u25-linux-x64.tar.gz（具体jdk版本看你自己选择，在Oracle官网上下载  ）到xftp上的/usr/local</p>
<h5 id="2、安装jdk（JDK默认安装在-usr-java中）："><a href="#2、安装jdk（JDK默认安装在-usr-java中）：" class="headerlink" title="2、安装jdk（JDK默认安装在/usr/java中）："></a>2、安装jdk（JDK默认安装在/usr/java中）：</h5><p>[root@localhost  ~]#cd /usr/local (cd 空格后路径是你刚刚上传到xftp的路径，<strong>不要搞错了，我上是传到/usr/local</strong>，这一点很多博客文档都没说清楚，导致很多初学者会具体操作时出错)<br>[root@localhost ckb]# rpm -ivh jdk-7-linux-i586.rpm或者[root@localhost ckb]#tar –zxvf jdk-8u25-linux-x64.tar.gz</p>
<h5 id="3、验证安装"><a href="#3、验证安装" class="headerlink" title="3、验证安装"></a>3、验证安装</h5><p>执行以下操作，查看信息是否正常：</p>
<p>[root@localhost bin]# java</p>
<p>[root@localhost bin]# javac</p>
<p>[root@localhost bin]# java -version</p>
<p>java version “1.7.0_45”<br>Java(TM) SE Runtime Environment (build 1.7.0_45-b18)<br>Java HotSpot(TM) Client VM (build 24.45-b08, mixed mode, sharing)</p>
<h5 id="4、配置环境变量"><a href="#4、配置环境变量" class="headerlink" title="4、配置环境变量"></a>4、配置环境变量</h5><p>我的机器安装完jdk-7-linux-i586.rpm后不用配置环境变量也可以正常执行javac、java –version操作，因此我没有进行JDK环境变量的配置。</p>
<p>但是为了以后的不适之需，这里还是记录一下怎么进行配置，操作如下：<br>修改系统环境变量文件<br>vi + /etc/profile<br>执行之后 按”i”建，INSERT出现表示可以编辑<br>向文件里面追加以下内容：</p>
<p>在光标处添加<br>JAVA_HOME=/usr/java/jdk1.7.0_45</p>
<p>JRE_HOME=/usr/java/jdk1.7.0_45/jre</p>
<p>PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin</p>
<p>CLASSPATH=:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib<br>export JAVA_HOME JRE_HOME PATH CLASSPATH<br>（然后按Esc退出，”:”符+ wq保存并退出）</p>
<p>使修改生效<br>[root@localhost ~]# source /etc/profile<br>（使修改立即生效）</p>
<p>[root@localhost ~]# echo $PATH<br>（查看PATH值）</p>
<p>查看系统环境状态</p>
<p>[root@localhost ~]# echo $PATH<br>/usr/lib/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/usr/java/jdk1.7.0_45/bin:<br>/usr/java/jdk1.7.0_45/jre/bin:/home/ckb/bin</p>
<h3 id="二、-部署tomcat-与配置jdk类似"><a href="#二、-部署tomcat-与配置jdk类似" class="headerlink" title="二、    部署tomcat(与配置jdk类似)"></a>二、    部署tomcat(与配置jdk类似)</h3><p>在tomcat官网上下载 apache-tomcat-8.0.15.tar.gz并上传到/usr/local</p>
<p>[root@localhost ~]#cd /usr/local</p>
<p>[root@localhost local]#tar –zxvf apache-tomcat-8.0.15.tar.gz</p>
<p>初始化配置：<br>[root@localhost ~]#vi catalina.sh<br>//设置环境变量</p>
<p>末行添加：<br>JAVA_HOME=/usr/java<br>CATALINA_HOME=/usr/local/apache-tomcat-8.0.15<br>export JAVA_HOME PATH<br>（然后按Esc退出，”:”符+ wq保存并退出）</p>
<h5 id="2、启动tomcat"><a href="#2、启动tomcat" class="headerlink" title="2、启动tomcat"></a>2、启动tomcat</h5><p>进入tomcat/bin目录</p>
<p>[root@localhost ~]#cd /usr/local/apache-tomcat-8.0.15/lib</p>
<p>[root@localhost bin] #  ./startup.sh<br>[root@localhost bin] # ./shutdown.sh //关闭tomcat</p>
<p>启动之后就可以在浏览器输入你的公网ip:8080（tomcat默认端口），看到tomcat页面。</p>
<h4 id="三-配置mysql"><a href="#三-配置mysql" class="headerlink" title="三  配置mysql"></a>三  配置mysql</h4><p>（我的这里参考了<a href="http://note.youdao.com/" target="_blank" rel="external">http://blog.csdn.net/sapce_fish/article/details/51619830?locationNum=12&amp;fps=1</a>这篇博客，版本为mysql.x86_64 5.1.73-7.el6，当然你也可以安装其他版本）</p>
<p>安装mysql；==<strong>特别注意</strong>==：网上很多安装mysql的文章，都是不行的！！！！</p>
<p>#我喜欢在home目录操作命令<br>cd /home</p>
<p>#查看所有以mysql开头的软件</p>
<p>yum list mysql*</p>
<p>#安装mysql</p>
<p>yum install mysql-server* -y</p>
<p>#启动mysql</p>
<p>/etc/init.d/mysqld start</p>
<p>#设定mysql自动启动，我亲自重启了ECS，确实ok</p>
<p>chkconfig mysqld on</p>
<p>#复制mysql的配置文件到etc目录，提示是否覆盖，选择y<br>cp /usr/share/mysql/my-medium.cnf   /etc/my.cnf</p>
<p>#重新设定mysql密码，默认密码是【空】，输入新密码，注意提问，是否删除匿名账户？【y】  是否禁止远程登录？【n】是否移除test数据库?【y】是否重载权限文件【y】<br>mysql_secure_installation</p>
<p>#重启mysql，此时用本机Navicat Premium还是连不上mysql的！<br>/etc/init.d/mysqld restart</p>
<p>#用命令访问mysql<br>mysql -u root -p</p>
<p>#使用mysql数据库<br>use mysql;</p>
<p>#查询当前用户情况，显示有3条记录，127.0.0.1；localhost；izxxxxxxxdz；其中最后这个是ECS主机名</p>
<p>select host, user from user;  </p>
<p>#把localhost这条记录的host改为 %； 意思是root可以由任何主机登录mysql，网上很多写法，都没有and host=’localhost’这个条件，经常报错。<br>update user set host = ‘%’ where user = ‘root’ and host=’localhost’;</p>
<p>#再次查询，可以看到host有3个；%；127.0.0.1；izxxxxxxxdz；其实user表的主键是user字段和host字段的联合主键。<br>select host, user from user;</p>
<p>#保险起见，重启mysql，Navicat Premium连接正常！万岁！<br>/etc/init.d/mysqld restart</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;阿里云ECS服务器-centos6-5安装jdk，mysql，tomcat&quot;&gt;&lt;a href=&quot;#阿里云ECS服务器-centos6-5安装jdk，mysql，tomcat&quot; class=&quot;headerlink&quot; title=&quot;阿里云ECS服务器,centos6.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://www.xiangyu520.top/uncategorized/2017/07/31/Java%E9%9D%A2%E8%AF%95%E9%A2%98%EF%BC%88%E4%B8%80%EF%BC%89.html"/>
    <id>http://www.xiangyu520.top/uncategorized/2017/07/31/Java面试题（一）.html</id>
    <published>2017-07-31T09:54:57.108Z</published>
    <updated>2017-07-31T09:56:12.791Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面试官常问的Java题"><a href="#面试官常问的Java题" class="headerlink" title="面试官常问的Java题"></a><strong>面试官常问的Java题</strong></h1><h2 id="1、Spring-MVC的工作原理是怎样的？"><a href="#1、Spring-MVC的工作原理是怎样的？" class="headerlink" title="1、Spring MVC的工作原理是怎样的？"></a>1、Spring MVC的工作原理是怎样的？</h2><p>客户端的所有请求都交给前端控制器DispatcherServlet来处理，它会负责调用系统的其他模块来真正处理用户的请求。</p>
<p>DispatcherServlet收到请求后，将根据请求的信息（包括URL、HTTP协议方法、请求头、请求参数、Cookie等）以及HandlerMapping的配置找到处理该请求的Handler（任何一个对象都可以作为请求的Handler）。在这个地方Spring会通过HandlerAdapter（一个适配器，它用统一的接口对各种Handler中的方法进行调用。）对该处理器进行封装。</p>
<p>Handler完成对用户请求的处理后，会返回一个ModelAndView（包含了数据模型以及相应的视图的信息）对象给DispatcherServlet。</p>
<p>DispatcherServlet还要借助ViewResolver完成从逻辑视图到真实视图对象的解析工作。</p>
<p>当得到真正的视图对象后，DispatcherServlet会利用视图对象对模型数据进行渲染。</p>
<p>客户端得到响应，可能是一个普通的HTML页面，也可以是XML或JSON字符串，还可以是一张图片或者一个PDF文件。</p>
<h2 id="2、什么是IoC和DI？DI是如何实现的？"><a href="#2、什么是IoC和DI？DI是如何实现的？" class="headerlink" title="2、什么是IoC和DI？DI是如何实现的？"></a>2、什么是IoC和DI？DI是如何实现的？</h2><p>IoC叫控制反转，是Inversion of Control的缩写，DI（Dependency Injection）叫依赖注入，是对IoC更简单的诠释。</p>
<p>控制反转是把传统上由程序代码直接操控的对象的调用权交给容器，通过容器来实现对象组件的装配和管理。所谓的”控制反转”就是对组件对象控制权的转移，从程序代码本身转移到了外部容器，由容器来创建对象并管理对象之间的依赖关系。</p>
<p>依赖注入的基本原则是应用组件不应该负责查找资源或者其他依赖的协作对象。配置对象的工作应该由容器负责，查找资源的逻辑应该从应用组件的代码中抽取出来，交给容器来完成。DI是对IoC更准确的描述，即组件之间的依赖关系由容器在运行期决定，形象的来说，即由容器动态的将某种依赖关系注入到组件之中。</p>
<p>依赖注入可以通过setter方法注入（设值注入）、构造器注入和接口注入三种方式来实现，Spring支持setter注入和构造器注入，通常使用构造器注入来注入必须的依赖关系，对于可选的依赖关系，则setter注入是更好的选择，setter注入需要类提供无参构造器或者无参的静态工厂方法来创建对象。</p>
<h2 id="3、MyBatis中使用-和-书写占位符有什么区别？"><a href="#3、MyBatis中使用-和-书写占位符有什么区别？" class="headerlink" title="3、MyBatis中使用#和$书写占位符有什么区别？"></a>3、MyBatis中使用#和$书写占位符有什么区别？</h2><p>#将传入的数据都当成一个字符串，会对传入的数据自动加上引号；</p>
<p>$将传入的数据直接显示生成在SQL中。</p>
<p>注意：使用$占位符可能会导致SQL注射攻击，能用#的地方就不要使用$，写order by子句的时候应该用$而不是#。</p>
<h2 id="4、JSP有9个内置对象："><a href="#4、JSP有9个内置对象：" class="headerlink" title="4、JSP有9个内置对象："></a>4、JSP有9个内置对象：</h2><ul>
<li>request：封装客户端的请求，其中包含来自GET或POST请求的参数; </li>
</ul>
<ul>
<li>response：封装服务器对客户端的响应;</li>
<li>pageContext：通过该对象可以获取其他对象;</li>
<li>session：封装用户会话的对象; </li>
</ul>
<ul>
<li>application：封装服务器运行环境的对象;</li>
<li>out ：输出服务器响应的输出流对象; -</li>
<li>config：Web应用的配置对象; -</li>
<li>page：JSP页面本身（相当于Java程序中的这个）;</li>
<li>exception：封装页面抛出异常的对象。</li>
</ul>
<h2 id="5、讲解JSP中的四种作用域"><a href="#5、讲解JSP中的四种作用域" class="headerlink" title="5、讲解JSP中的四种作用域"></a>5、讲解JSP中的四种作用域</h2><p>答：JSP中的四种作用域包含page，request，session和application</p>
<p>具体来说： </p>
<ul>
<li>page代表与一个页面相关的对象和属性.</li>
<li>request代表与Web客户机发出的一个请求相关的对象和属性。一个请求可能跨越多个页面，涉及多个Web组件;需要在页面显示的临时数据可以置于此作用域.</li>
<li>session代表与某个用户与服务器建立的一次会话相关的对象和属性。跟某个用户相关的数据应该放在用户自己的会话中。</li>
<li>application是整个网络应用程序相关的对象和属性，它实质上是跨越整个网络应用程序，包括多个页面，请求 和会话的一个全局作用域。</li>
</ul>
<h2 id="6、你的项目中使用过哪些JSTL标签？"><a href="#6、你的项目中使用过哪些JSTL标签？" class="headerlink" title="6、你的项目中使用过哪些JSTL标签？"></a>6、你的项目中使用过哪些JSTL标签？</h2><p>答：项目中主要使用了JSTL的核心标签库，包括<c：if>，<c：choose>，<c：when>，<c：otherwise> <c：foreach>等，主要用于构造循环和分支结构以控制显示逻辑。</c：foreach></c：otherwise></c：when></c：choose></c：if></p>
<h2 id="7、Jsp指令有那些？"><a href="#7、Jsp指令有那些？" class="headerlink" title="7、Jsp指令有那些？"></a>7、Jsp指令有那些？</h2><p>Include</p>
<p>Taglib</p>
<p>Page</p>
<h2 id="8、会话跟踪技术有那些？"><a href="#8、会话跟踪技术有那些？" class="headerlink" title="8、会话跟踪技术有那些？"></a>8、会话跟踪技术有那些？</h2><p>Session</p>
<p>Cookie</p>
<p>表单隐藏域</p>
<p>url重写</p>
<h2 id="9、Session与cookie的区别？"><a href="#9、Session与cookie的区别？" class="headerlink" title="9、Session与cookie的区别？"></a>9、Session与cookie的区别？</h2><p>Session保存在服务端，cookie保存在客户端</p>
<p>Session保存是对象，cookie只能保存字符串</p>
<p>Session不能设置路径，cookie可以设置保存路径。</p>
<p>同一个网站不同网页的cookie可以保存到不通的路机构下，彼此是无法相互访问的。</p>
<p>Session在服务器关闭后会自动消失，cookie则不会。</p>
<h2 id="10、创建socket通讯的步骤？"><a href="#10、创建socket通讯的步骤？" class="headerlink" title="10、创建socket通讯的步骤？"></a>10、创建socket通讯的步骤？</h2><ul>
<li><p>服务器程序创建一个ServerSocket，然后再用accept方法等待客户来连接</p>
</li>
<li><p>客户端程序创建一个Socket并请求与服务器建立连接</p>
</li>
<li><p>服务器接收客户的连接请求,并创建一个新的Socket与该客户建立专线连接</p>
</li>
<li><p>刚才建立了连接的两个Socket在一个线程上对话</p>
</li>
<li><p>服务器开始等待新的连接请求</p>
</li>
</ul>
<h2 id="11、什么是事务？事务有那些特点？"><a href="#11、什么是事务？事务有那些特点？" class="headerlink" title="11、什么是事务？事务有那些特点？"></a>11、什么是事务？事务有那些特点？</h2><p>事务：<br>单个逻辑单元执行的一系列操作，要么全部执行，要么全部不执行。</p>
<p>特点：</p>
<ul>
<li><p>原子性（Atomicity）：事务中各元素不可分割，全部执行成功或者撤销所有的操作</p>
</li>
<li><p>一致性（Consistency）：事务完成后数据保持一致的状态</p>
</li>
<li><p>隔离性（Isolation）：事务是相对独立的，对某数据进行修改时，其他事务不变</p>
</li>
<li><p>持久性（Durability）：事务完成后对系统的影响是永久性的。</p>
</li>
</ul>
<h2 id="12、聚集索引与非聚集索引有什么区别？"><a href="#12、聚集索引与非聚集索引有什么区别？" class="headerlink" title="12、聚集索引与非聚集索引有什么区别？"></a>12、聚集索引与非聚集索引有什么区别？</h2><p>所有的索引都是为了更快地检索数据，索引存放在索引页中，数据存放在数据页中，索引以B（balance）树的形式存储</p>
<ul>
<li><p>聚集索引：聚集索引用于决定数据表中的物理存储顺序，一张表最多有一个聚集索引。聚集索引的字段值尽量不能修改，因为修改后，因为修改后数据表的物理顺序需要重写排序。通常主键就是聚集索引</p>
</li>
<li><p>非聚集索引：非聚集索引的关键自是index，不会决定表的物理存储顺序，在一张表内最多可以有249个非聚集索引。</p>
</li>
</ul>
<h2 id="13、Java-API解析xml主要有两种方式；"><a href="#13、Java-API解析xml主要有两种方式；" class="headerlink" title="13、Java API解析xml主要有两种方式；"></a>13、Java API解析xml主要有两种方式；</h2><ul>
<li><p>Dom解析：一次性加载整个文档，生成树形结构。在生成的文档对象中，可以对节点进行增删改查的操作。当xml文本当较小的时候，可以使用dom解析。</p>
</li>
<li><p>Sax解析：基于事件的解析方式，解析速度比较快，解析的文档大小理论上是没有限制的。</p>
</li>
</ul>
<p>还有一些开源的技术可以解析xml，dom4j或者jdom。</p>
<h2 id="14、Sql中delete与truncate的区别"><a href="#14、Sql中delete与truncate的区别" class="headerlink" title="14、Sql中delete与truncate的区别"></a>14、Sql中delete与truncate的区别</h2><ul>
<li>DELETE：选择性地删除数据，当删除整张表的数据时效率较低；</li>
<li>truncate只能删除整张表的数据，但是效率高于使用DELETE语句；不能选择性地删除。当truncate执行删除之后，自动生成的主键值重新从默认值开始。</li>
</ul>
<h2 id="15、过滤器有哪些作用和用法？"><a href="#15、过滤器有哪些作用和用法？" class="headerlink" title="15、过滤器有哪些作用和用法？"></a>15、过滤器有哪些作用和用法？</h2><ul>
<li><p>过滤器是一个驻留在服务器端的网络组件，它可以截取客户端和服务器之间的请求与响应信息，并对这些信息进行过滤。</p>
</li>
<li><p>当网络容器接受到一个对资源的请求时，它将判断是否有过滤器与这个资源相关联。如果有，那么容器将把请求交给过滤器进行处理。</p>
</li>
<li><p>在过滤器中，你可以改变请求的内容，或者重新设置请求的报头信息，然后再将请求发送给目标资源。当目标资源对请求作出响应时候，容器同样会将响应先转发给过滤器，在过滤器中你可以对响应的内容进行转换，然后再将响应发送到客户端。</p>
</li>
<li><p>常见的过滤器用途主要包括：对用户请求进行统一认证，对用户的访问请求进行记录和审核，对用户发送的数据进行过滤或替换，转换图象格式，对响应内容进行压缩以减少传输量，对请求或响应进行加解密处理，触发资源访问事件，对XML的输出应用XSLT等。</p>
</li>
<li>和过滤器相关的接口主要有：过滤器，一个FilterConfig和FilterChain。</li>
</ul>
<h2 id="16、监听器有哪些作用和用法？"><a href="#16、监听器有哪些作用和用法？" class="headerlink" title="16、监听器有哪些作用和用法？"></a>16、监听器有哪些作用和用法？</h2><p>答：Java Web开发中的监听器（监听器）就是应用程序，会话，请求三个对象创建，销毁或者往其中添加修改删除属性时自动执行代码的功能组件，</p>
<p>如下所示：<br>①ServletContextListener：对Servlet上下文的创建和销毁进行监听</p>
<p>②ServletContextAttributeListener：监听Servlet上下文属性的添加，删除和替换</p>
<p>③HttpSessionListener：对会话的创建和销毁进行监听。</p>
<p>补充：session的销毁有两种情况：1). session超时（可以在web.xml中通过<session-config>/<session-timeout>标签配置超时时间）；</session-timeout></session-config></p>
<p>2). 通过调用session对象的invalidate()方法使session失效。<br>⑤HttpSessionAttributeListener：对会话对象中属性的添加，删除和替换进行监听<br>⑤ServletRequestListener：对请求对象的初始化和销毁<br>​​进行监听<br>⑥ServletRequestAttributeListener：对请求对象属性的添加，删除和替换进行监听。</p>
<h2 id="17、简述JVM内存分配"><a href="#17、简述JVM内存分配" class="headerlink" title="17、简述JVM内存分配"></a>17、简述JVM内存分配</h2><ol>
<li><p>基本数据类型变量和对象的引用都是在栈分配的</p>
</li>
<li><p>堆内存用来存放由new创建的对象和数组</p>
</li>
<li>类变量(static修饰的变量)，程序在加载的时候就在堆中为类变量分配内存，堆中的内存地址存放在栈中</li>
<li>实例变量，当你使用java关键字new的时候，系统在堆中开辟并不一定是连续的空间分配给变量，是根据零散的堆内存地址，通过哈希算法换算为一长串数字以表征这个变量在堆中的物理位置。实例变量的生命周期: 当实例变量的引用丢失后，将被GC（垃圾回收器）列入可回收名单中，但并不是马上就释放堆中内存。</li>
<li>局部变量: 由声明在某方法，或某代码段里（比如for循环），执行到它的时候在栈中开辟内存，当局部变量一但脱离作用域，内存立即释放<h2 id="18、JVM内存模型"><a href="#18、JVM内存模型" class="headerlink" title="18、JVM内存模型"></a>18、JVM内存模型</h2><img src="E:\java\2199827-3c88e62d92c1cfda.png" alt="image"></li>
</ol>
<h2 id="19、String对象的intern-是干什么的"><a href="#19、String对象的intern-是干什么的" class="headerlink" title="19、String对象的intern()是干什么的"></a>19、String对象的intern()是干什么的</h2><p>intern()方法会首先从常量池中查找是否存在该常量值, 如果常量池中不存在则先在常量池中创建, 如果已经存在则直接返回, </p>
<p>如:<br>String s1=”aa”;<br>String s2=s1.intern();<br>System.out.print(s1==s2);//返回true</p>
<h2 id="20、你对static了解多少"><a href="#20、你对static了解多少" class="headerlink" title="20、你对static了解多少"></a>20、你对static了解多少</h2><ul>
<li><p>static成员变量是在类加载的时候生成的</p>
</li>
<li><p>static成员函数既可以通过类名直接调用，也可以通过对象名进行调用虚函数是C++中的，虚函数不可能是static的</p>
</li>
<li>static成员函数可以访问static成员变量</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;面试官常问的Java题&quot;&gt;&lt;a href=&quot;#面试官常问的Java题&quot; class=&quot;headerlink&quot; title=&quot;面试官常问的Java题&quot;&gt;&lt;/a&gt;&lt;strong&gt;面试官常问的Java题&lt;/strong&gt;&lt;/h1&gt;&lt;h2 id=&quot;1、Spring-MVC
    
    </summary>
    
    
  </entry>
  
</feed>
